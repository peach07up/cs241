/**
 * MapReduce
 * CS 241 - Spring 2016
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include "common.h"

void usage() {
    printf("./mr1 input_file output_file mapper_exec reducer_exec num_mappers num_reducers\n");
}

int main(int argc, char **argv) {
    // setup pipes
    // start mappers
    // start shuffler
    // start reducers
    // wait for everything to finish
    
    if(argc != 7)
    {
        usage();
        return 0;
    }
    
    // Get the arguments
    char *input = argv[1];
    // Delete the output file first if it exists
    unlink(argv[2]);
    char *mapper = argv[3];
    char *reducer = argv[4];
    int num_mappers = atoi(argv[5]);
    int num_reducers = atoi(argv[6]);
    
    // Make the Pipes
    int **pipes = malloc(sizeof(int) * 2  * num_mappers);
    for(int i = 0; i < num_mappers; i++)
    {
        pipes[i] = malloc(sizeof(int) * 2);
        pipe2(pipes[i], O_CLOEXEC);
        descriptors_add(pipes[i][0]);
        descriptors_add(pipes[i][1]);
    }
    int pipe[2];
    
    pipe2(pipe, O_CLOEXEC);
    descriptors_add(pipe[0]);
    descriptors_add(pipe[1]);
    
    // Use the provided descriptors_add function to keep track of all our
    // open files
    
    pid_t *splitter_pids = malloc(sizeof(pid_t) * num_mappers);
    pid_t *mapper_pids = malloc(sizeof(pid_t) * num_mappers);
    pid_t *reducer_pids = malloc(sizeof(pid_t) * num_reducers);
    
    for(int i = 0; i < num_mappers; i++)
    {
        splitter_pids[i] = fork();
        
        if(splitter_pids[i] == 0)
        {
            char *nm = malloc(sizeof(char) * 10);
            sprintf(nm, "%d", num_mappers);
            char *is = malloc(sizeof(char) * 10);
            sprintf(is, "%d", i);
            
            // Mapper Write to Stdout
            dup2(pipes[i][1], 1);
            
            descriptors_closeall();
            execl("./splitter", "splitter", input, nm, is, NULL);
        }
    }
    
    for(int i = 0; i < num_mappers; i++)
    {
        mapper_pids[i] = fork();
        
        if(mapper_pids[i] == 0)
        {
            // Mapper Read to Stdin
            dup2(pipes[i][0], 0);
            
            // Reducer Write to Stdou
            dup2(pipe[1], 1);
            
            descriptors_closeall();
            
            execl(mapper, mapper);
        }
    }
    
    // int mkfifo(const char *pathname, mode_t mode);
    
    // +2 because exec requires an extra NULL and the shuffler name
    char **args = malloc(sizeof(char *) * (num_reducers + 2));
    
    args[0] = malloc(sizeof(char) * 9);
    strcpy(args[0], "shuffler");
    
    for(int i = 1; i < num_reducers+1; i++)
    {
        args[i] = malloc(sizeof(char) * 10);
        // Create the filename
        sprintf(args[i], "fifo_%d", i);
        // Delete the FIFO File if its exists already
        unlink(args[i]);
        // Create the FIFO file
        int error = mkfifo(args[i], S_IRWXU);
        if(error != 0)
        {
            printf("FIFO Error %d\n", error);
        }
    }
    args[num_reducers+1] = NULL;
    
    pid_t shuffler_pid = fork();
    
    if(shuffler_pid == 0)
    {
        dup2(pipe[0], 0);
        
        descriptors_closeall();
        
        // We'll use execv instead of execl, which takes an array instead of
        // lots of parameters
        execv("./shuffler", args);
    }
    
    for(int i = 0; i < num_reducers; i++)
    {
        reducer_pids[i] = fork();
        
        if(reducer_pids[i] == 0)
        {
            // Open a descriptor to the fifo
            // args[i+1] because FIFO for Process i in in args[i+1] because
            // args[0] was taken by the shuffler filename already
            // We'll rely on the O_CLOEXEC flag to automatically close this
            // When we call execl
            int fifo = open(args[i+1], O_RDONLY | O_CLOEXEC);
            dup2(fifo, 0);
            
            // Create a new output file descriptor for every child process
            // Get rid of Truncate since we don't want to overwrite anything in the file
            // We added an unlink at the top of the program to makesure output
            // is empty. We'll use append so that every reducer doesn't
            // overwrite eachother.
            fprintf(stderr, "Opening %s\n", argv[2]);
            int output = open(argv[2], O_RDWR | O_CLOEXEC | O_CREAT | O_APPEND, S_IRWXU);
            fprintf(stderr, "Opened %s at %d with Err %d\n", argv[2], output, errno);
            dup2(output, 1);
            
            descriptors_closeall();
            
            execl(reducer, reducer);
        }
    }
    
    // Close all the descriptors, we've passed them to the processes so we
    // don't need them here anymore
    descriptors_closeall();
    
    int status = 0;
    for(int i = 0; i < num_mappers; i++)
    {
        waitpid(splitter_pids[i], &status, 0);
        if(WIFEXITED(status))
        {
            if(WEXITSTATUS(status) != 0)
            {
                printf("splitter exited with status %d\n", (int)WEXITSTATUS(status));
            }
        }
        
        waitpid(mapper_pids[i], &status, 0);
        if(WIFEXITED(status))
        {
            if(WEXITSTATUS(status) != 0)
            {
                printf("%s exited with status %d\n", mapper, (int)WEXITSTATUS(status));
            }
        }
    }
    waitpid(shuffler_pid, &status, 0);
    if(WIFEXITED(status))
    {
        if(WEXITSTATUS(status) != 0)
        {
            printf("shuffler exited with status %d\n", (int)WEXITSTATUS(status));
        }
    }
    
    for(int i = 0; i < num_reducers; i++)
    {
        waitpid(reducer_pids[i], &status, 0);
        if(WIFEXITED(status))
        {
            if(WEXITSTATUS(status) != 0)
            {
                printf("%s exited with status %d\n", reducer, (int)WEXITSTATUS(status));
            }
        }
    }
    
    // Destroy the FIFO files
    for(int i = 1; i <= num_reducers; i++)
    {
        unlink(args[i]);
    }
    
    // Free the memory
    descriptors_destroy();
    free(pipes);
    for(int i = 0; i < num_reducers + 2; i++)
    {
        free(args[i]);
    }
    free(args);
    
    return 0;
}

