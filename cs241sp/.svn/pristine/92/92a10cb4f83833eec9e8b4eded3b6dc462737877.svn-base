/**
 * Machine Problem: Wearables
 * CS 241 - Spring 2016
 */

#include <fcntl.h>
#include <netdb.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#include <time.h>
#include <errno.h>

#include <pthread.h>

#include "queue.h"

const char *TYPE1 = "heart_beat";
const char *TYPE2 = "blood_sugar";
const char *TYPE3 = "body_temp";

// The wearable server socket, which all wearables connect to.
int wearable_server_fd;

// A lock for your queue.
pthread_mutex_t queue_lock_;
// A queue for all received data.
queue_t receieved_data_;

typedef struct SampleData {
    
    char type_[50];
    int data_;
    
} SampleData;

int compare(const void *a, const void *b) { return (*(int *)a - *(int *)b); }

int select1(void *data) {
    return strcmp(((SampleData *)data)->type_, TYPE1) == 0;
}

int select2(void *data) {
    return strcmp(((SampleData *)data)->type_, TYPE2) == 0;
}

int select3(void *data) {
    return strcmp(((SampleData *)data)->type_, TYPE3) == 0;
}

int selectorall(void *__attribute__((unused)) val) { return 1; }

typedef struct {
    pthread_t thread;
    int fd;
    long timestamp;
    int finished;
    // TODO you might want to put more things here
} thread_data;

thread_data **wearable_threads;
int wearable_threads_size = 0;

pthread_mutex_t output_lock = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t output_cond = PTHREAD_COND_INITIALIZER;

/**
 * Used to write out the statistics of a given results set (of
 * timestamp_entry's).  To generate the result set see queue_gather(). fd is the
 * file descriptor to which the information is sent out. The type is the type of
 * data that is written out (TYPE1, TYPE2, TYPE3). results is the array of
 * timestamp_entrys, and size is the size of that array. NOTE: that you should
 * call method for every type (TYPE1, TYPE2, TYPE3), and then write out the
 * infomration "\r\n" to signify that you have finished sending out the results.
 */
void write_results(int fd, const char *type, timestamp_entry *results,
                   int size) {
    long avg = 0;
    int i;
    
    char buffer[1024];
    int temp_array[size];
    sprintf(buffer, "Results for %s:\n", type);
    sprintf(buffer + strlen(buffer), "Size:%i\n", size);
    for (i = 0; i < size; i++) {
        temp_array[i] = ((SampleData *)(results[i].data_))->data_;
        avg += ((SampleData *)(results[i].data_))->data_;
    }
    
    qsort(temp_array, size, sizeof(int), compare);
    
    if (size != 0) {
        sprintf(buffer + strlen(buffer), "Median:%i\n",
                (size % 2 == 0)
                ? (temp_array[size / 2] + temp_array[size / 2 - 1]) / 2
                : temp_array[size / 2]);
    } else {
        sprintf(buffer + strlen(buffer), "Median:0\n");
    }
    
    sprintf(buffer + strlen(buffer), "Average:%li\n\n",
            (size == 0 ? 0 : avg / size));
    write(fd, buffer, strlen(buffer));
}

/**
 * Given an input line in the form <timestamp>:<value>:<type>, this method
 * parses the infomration from the string, into the given timestamp, and mallocs
 * space for SampleData, and stores the type and value within
 */
void extract_key(char *line, long *timestamp, SampleData **ret) {
    *ret = malloc(sizeof(SampleData));
    sscanf(line, "%zu:%i:%s\n", timestamp, &((*ret)->data_), (*ret)->type_);
    // eat the trailing ":"
    (*ret)->type_[strlen((*ret)->type_) - 1] = '\0';
}

void *wearable_processor_thread(void *args) {
    thread_data *td = (thread_data *)args;
    int socketfd = td->fd;
    
    // Use a buffer of length 64!
    // TODO read data from the socket until -1 is returned by read
    char buffer[64];
    printf("Begin Reading %d\n", socketfd);
    while (read(socketfd, buffer, 64) > 0)  // or do you need recv???
    {
        printf("Reading Wearable\n");
        SampleData *data;
        extract_key(buffer, &(td->timestamp), &data);
        printf("Timestamp %lu\n", td->timestamp);
        
        printf("Inserting Queue\n");
        pthread_mutex_lock(&queue_lock_);
        queue_insert(&receieved_data_, td->timestamp, data);
        pthread_mutex_unlock(&queue_lock_);
        printf("Queue Inserted\n");
        
        printf("Wearable Cond Signal\n");
        pthread_mutex_lock(&output_lock);
        pthread_cond_signal(&output_cond);
        pthread_mutex_unlock(&output_lock);
        printf("Wearable Cond Signaled\n");
    }
    
    printf("Wearable Finished\n");
    td->finished = 1;
    
    printf("Wearable Cond Signal\n");
    pthread_mutex_lock(&output_lock);
    pthread_cond_signal(&output_cond);
    pthread_mutex_unlock(&output_lock);
    printf("Wearable Cond Signaled\n");
    
    close(socketfd);
    return NULL;
}

void *user_request_thread(void *args) {
    int socketfd = *((int *)args);
    
    // TODO read data from the socket until -1 is returned by read
    // Requests will be in the form
    //<timestamp1>:<timestamp2>, then write out statistics for data between
    // those timestamp ranges
    
    char buffer[64];
    while (read(socketfd, buffer, 64) > 0)
    {
        long start, end;
        sscanf(buffer, "%ld:%ld\n", &start, &end);
        
        printf("User Request %ld:%ld\n", start, end);
        
        int len;
        timestamp_entry *results;
        int go = 1;
        
        for(int i = 0; i < wearable_threads_size; i++)
        {
            if(!wearable_threads[i]->finished && wearable_threads[i]->timestamp < end)
            {
                printf("Wearable Threads not at end yet\n");
                go = 0;
                break;
            }
        }
        
        while(go != 1)
        {
            printf("Cond Wait\n");
            pthread_cond_wait(&output_cond, &output_lock);
            printf("Cond End\n");
            
            go = 1;
            for(int i = 0; i < wearable_threads_size; i++)
            {
                if(!wearable_threads[i]->finished && wearable_threads[i]->timestamp < end)
                {
                    printf("Wearable Threads not at end yet\n");
                    go = 0;
                    break;
                }
            }
        }
        
        pthread_mutex_lock(&queue_lock_);
        
        printf("Write Request\n");
        results = queue_gather(&receieved_data_, start, end, select1, &len);
        write_results(socketfd, TYPE1, results, len);
        free(results);
        
        results = queue_gather(&receieved_data_, start, end, select2, &len);
        write_results(socketfd, TYPE2, results, len);
        free(results);
        
        results = queue_gather(&receieved_data_, start, end, select3, &len);
        write_results(socketfd, TYPE3, results, len);
        free(results);
        
        pthread_mutex_unlock(&queue_lock_);
        
        write(socketfd, "\r\n", 2);
    }
    
    printf("Done User\n");
    
    close(socketfd);
    return NULL;
}

// IMPLEMENT!
// given a string with the port value, set up a
// serversocket file descriptor and return it
int open_server_socket(const char *port) {
    struct sockaddr_in address;
    
    int socketfd = socket(AF_INET, SOCK_STREAM, 0);
    
    if(socketfd == -1)
    {
        printf("Socket Error %d\n", errno);
    }
    
    bzero((char *) &address, sizeof(address));
    address.sin_family = AF_INET;
    address.sin_port = htons(atoi(port));
    address.sin_addr.s_addr = INADDR_ANY;
    int ret = bind(socketfd, &address, sizeof(address));
    
    if(ret == -1)
    {
        printf("Bind Error %d\n", errno);
    }
    
    ret = listen(socketfd, 5);
    
    if(ret == -1)
    {
        printf("Listen Error %d\n", errno);
    }
    return socketfd;
}

void signal_received(int sig) {
    // TODO close server socket, free anything you don't free in main
    close(wearable_server_fd);
    wearable_server_fd = 0;
}

int main(int argc, const char *argv[]) {
    if (argc != 3) {
        printf("Invalid input size\n");
        exit(EXIT_FAILURE);
    }
    // TODO setup sig handler for SIGINT
    signal(SIGINT, signal_received);
    
    printf("Request Server\n");
    int request_server_fd = open_server_socket(argv[2]);
    printf("Wearable Server\n");
    wearable_server_fd = open_server_socket(argv[1]);
    
    pthread_t request_thread;
    int request_socket = accept(request_server_fd, NULL, NULL);
    printf("Request Accepted\n");
    pthread_create(&request_thread, NULL, user_request_thread, &request_socket);
    close(request_server_fd);
    
    queue_init(&receieved_data_);
    pthread_mutex_init(&queue_lock_, NULL);
    // TODO accept continous requests
    // TODO join all threads we spawned from the wearables
    while(wearable_server_fd != 0)
    {
        int wearable_socket = accept(wearable_server_fd, NULL, NULL);
        printf("Wearable Accepted\n");
        if(wearable_socket != -1)
        {
            wearable_threads_size++;
            wearable_threads = realloc(wearable_threads, sizeof(thread_data *) * wearable_threads_size);
            wearable_threads[wearable_threads_size - 1] = malloc(sizeof(thread_data));
            wearable_threads[wearable_threads_size - 1]->fd = wearable_socket;
            wearable_threads[wearable_threads_size - 1]->timestamp = 0;
            wearable_threads[wearable_threads_size - 1]->finished = 0;
            printf("Running Wearable Thread FD %d\n", wearable_socket);
            pthread_create(&(wearable_threads[wearable_threads_size - 1]->thread), NULL, wearable_processor_thread, &wearable_threads[wearable_threads_size - 1]);
        }
    }
    for(int i = 0; i < wearable_threads_size; i++)
    {
        pthread_join(wearable_threads[i]->thread, NULL);
    }
    
    pthread_join(request_thread, NULL);
    queue_destroy(&receieved_data_, 1);
    
    return 0;
}

