/**
 * Mad Mad Access Pattern
 * CS 241 - Spring 2016
 */
#include <time.h>
#include <sys/time.h>
#include "utils.h"
#include "tree.h"
#include "stdio.h"
#include "string.h"
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>

/*
 Look up a few nodes in the tree and print the info they contain.
 This version uses mmap to access the data.
 
 ./lookup2 <data_file> <word> [<word> ...]
 */


int print_keywords(char *filename, char **keywords, int num_keywords);

int main(int argc, char **argv)
{
    // argc is the number of arguments
    // argv is an array of arguments
    // There is always 1 argument, the name of the program
    // So if we have 2 arguments in, argc would be 3, not 2
    if(argc < 3)
    {
        printf("Usage: ./%s <data_file> <keyword> [<keyword> ...]", argv[0]);
        return 1;
    }
    
    // Initialize the keyword array
    int num_keywords = argc - 2;
    char *filename = argv[1];
    char *keywords[num_keywords];
    for(int i = 0; i < num_keywords; i++)
    {
        keywords[i] = argv[i + 2];
    }
    
    // We also need to time this
    
    struct timeval start;
    gettimeofday(&start, NULL);
    
    print_keywords(filename, keywords, num_keywords);
    
    struct timeval end;
    gettimeofday(&end, NULL);
    
    double duration = (double)end.tv_sec - (double)start.tv_sec + ((double)end.tv_usec - (double)start.tv_usec) / 1000000;
    
    printTime(duration);
}

// size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );
// int fseek ( FILE * stream, long int offset, int origin );
// int fgetc ( FILE * stream );
// FILE * fopen ( const char * filename, const char * mode );

int print_keywords(char *filename, char **keywords, int num_keywords)
{
    // First let's open the file
    // We only need read mode
    int fd = open(filename, O_RDONLY, "400");
    
    if(fd == -1)
    {
        // File can't be opened, error
        openFail(filename);
        return 2;
    }
    
    // Find the length of the file
    // Lseek is kind of like fseek, but it just returns an offset number
    // In this case, we just want to know what the offset of the end of the file is
    // This offset will be the same as the size
    int size = (int)lseek(fd, 0, SEEK_END);
    
    // Now set up the MMAP
    
    char *file = mmap(0, size, PROT_READ, MAP_SHARED, fd, 0);
    
    // Now let's make sure this file is valid and has BTRE
    // We'll make a string, 5 characters long, 4 for BTRE, 1 for the end character
    int index = 0;
    char btre[5] = "0000";
    BinaryTreeNode node;
    
    //read_bytes = fread(btre, 4, 1, file);
    memcpy(btre, &(file[index]), 4);
    if(strcmp(btre, "BTRE") == 0)
    {
        //Ok file is valid, let's keep reading
        for(int i = 0; i < num_keywords; i++)
        {
            // Reset to head for each new keyword
            index = 4;
            // Get the keyword we want
            char *keyword = keywords[i];
            // Keep looping until we get to the keyword or we get an error
            while(1)
            {
                // 3 ints, 1 float, each 4 bytes. So read 4 bytes 4 times
                // Luckily, they gave us float and uint32_t which are 4 bytes
                // instead of int which can be 8. So we can do this simplier
                // Convert char *buffer into a uint32_t or float pointer
                // Then dereference it for the value
                
                memcpy(&node.left_child, &(file[index]), 4);
                index += 4;
                memcpy(&node.right_child, &(file[index]), 4);
                index += 4;
                memcpy(&node.count, &(file[index]), 4);
                index += 4;
                memcpy(&node.price, &(file[index]), 4);
                index += 4;
                
                // Now we have to read the keyword
                // We can't use fread because we don't know how long the keyword is
                // We just keep reading until we get '\0'
                // So we'll use fgetc to read 1 byte at a time
                char keyword_buffer[100];
                int j = 0;
                printf("Read Keyword %d %d\n", j, index);
                for(j = 0; (j < 7 || (char)(file[index]) != '\0') && index < size; j++)
                {
                    printf("Read %d %d  = %c\n", index, j, file[index]);
                    keyword_buffer[j] = (char)(file[index]);
                    index++;
                    if(j == 100)
                    {
                        // This means the keyword is over 100 characters long
                        // It's probably an error
                        formatFail(filename);
                        break;
                    }
                }
                keyword_buffer[j] = '\0';
                
                printf("Get Record %d %d %d %f %s\n", node.left_child, node.right_child, node.count, node.price, keyword_buffer);
                
                // Ok we have the keyword, let's compare it to what we are searching
                int cmp = strcmp(keyword, keyword_buffer);
                
                // This is what we are searching for
                if(cmp == 0)
                {
                    // Print out count and price here
                    printFound(keyword, node.count, node.price);
                    break;
                }
                // Check left
                else if(cmp < 0)
                {
                    // As defined in the assignment, 0 means there is nothing there
                    // So we can't find the keyword
                    if(node.left_child == 0)
                    {
                        printNotFound(keyword);
                        break;
                    }
                    // Jump to the offset specified by left
                    index = (int)node.left_child;
                }
                // Check right
                else if(cmp > 0)
                {
                    // As defined in the assignment, 0 means there is nothing there
                    // So we can't find the keyword
                    if(node.right_child == 0)
                    {
                        printNotFound(keyword);
                        break;
                    }
                    // Jump to the offset specified by right
                    index = (int)node.right_child;
                }
            }
        }
    }
    else
    {
        // BTRE not there, error
        formatFail(filename);
        return 2;
    }
    
    // This is at the end
    // We'll write it now so we don't forget
    munmap(file, size);
    return 0;
}