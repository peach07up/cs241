{\rtf1\ansi\ansicpg936\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red48\green58\blue166;\red51\green51\blue51;\red249\green249\blue249;
\red98\green98\blue98;\red26\green26\blue26;\red66\green199\blue218;\red19\green151\blue241;\red29\green30\blue26;
\red246\green246\blue239;\red244\green0\blue95;\red130\green0\blue63;\red22\green0\blue14;\red252\green34\blue110;
\red224\green213\blue97;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\fs48 \cf1 \cb2 \expnd0\expndtw0\kerning0
menu
\fs52 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf1 \expnd0\expndtw0\kerning0
Title
\fs40 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf1 \cb2 CS 241 : System Programming\cb1 \
\pard\pardeftab720

\fs28 \cf1 \cb2 \expnd0\expndtw0\kerning0
Add spacer, to align navigation to the right\cb1 \expnd0\expndtw0\kerning0
\
\
\cb2 \expnd0\expndtw0\kerning0
Navigation. We hide it in small screens.
\fs26 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt \cf1 \cb2 Overview}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf1 \cb2 MPs}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cb2 Lab Sections}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cb2 Getting Help}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cb2 Schedule}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cb2 Meet the Crew!}}\
\pard\pardeftab720

\fs40 \cf3 \cb4 \expnd0\expndtw0\kerning0
CS 241\cb1 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt 
\fs26 \cf5 \cb4 \expnd0\expndtw0\kerning0
Overview}}
\fs26 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
MPs}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Lab Sections}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Getting Help}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Schedule}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Meet the Crew!}}\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your content goes here\
\pard\pardeftab720

\fs112 \cf6 \expnd0\expndtw0\kerning0
Shell\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\b \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Due Date(s):
\b0 \expnd0\expndtw0\kerning0
 2/22 11:59pm 
\fs26 \expnd0\expndtw0\kerning0
Contents\uc0\u8232 
\fs32 \cf7 \expnd0\expndtw0\kerning0
DISCLAIMER\uc0\u8232 Backstory\u8232 Overview\u8232 Starting your shell\u8232 Specifics\u8232 Commands\u8232 Built-in Commands\u8232 Non-built-in Commands\u8232 Grading, Submission, and Other Details\u8232 Compile and Run
\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
DISCLAIMER
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
If your code fork bombs on any autograde, then you will automatically fail this MP. Please make sure that your 
\f2 \expnd0\expndtw0\kerning0
fork()
\f0 \expnd0\expndtw0\kerning0
 code is correct before committing your code for the nightly autograder.\
If you use 
\f2 \expnd0\expndtw0\kerning0
system()
\f0 \expnd0\expndtw0\kerning0
, you will automatically fail this MP.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Backstory
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Now that you\'92ve completed your text editor, your mentor has assigned you a new task of implementing a simple Unix shell. The basic function of a shell is to accept commands as inputs and execute the corresponding programs in response. You will be provided the 
\f2 \expnd0\expndtw0\kerning0
Log
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
Vector
\f0 \expnd0\expndtw0\kerning0
, and 
\f2 \expnd0\expndtw0\kerning0
format
\f0 \expnd0\expndtw0\kerning0
 libraries for your use.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Overview
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your shell should operate like bash, which you are probably used to using. To execute multiple commands, your shell should run in a loop like this:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print a command prompt\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Read the command from standard input\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print the PID of the process executing the command (with the exception of built-in commands), and run the command\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Starting your shell
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your shell will support two optional arguments: 
\f2 \expnd0\expndtw0\kerning0
-h
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
-f
\f0 \expnd0\expndtw0\kerning0
. Both options can potentially be used at once.\
\pard\pardeftab720

\f2 \cf6 \expnd0\expndtw0\kerning0
-h
\f0 \expnd0\expndtw0\kerning0
 takes the filename of the history file. The shell should load in the history file as its history. Upon exit, the history file should be updated.\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
./shell -h <filename>\
\pard\pardeftab720

\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
-f
\f0 \expnd0\expndtw0\kerning0
 takes the name of the file to be executed by the shell. Your shell will run the commands in the file in sequential order. If the end of the file is reached without executing an exit command, then the shell should issue an exit command. See the following example file and execution:\
commands.txt\
\pard\pardeftab720

\f2\fs32 \cf10 \cb9 \expnd0\expndtw0\kerning0
cd \cf1 \expnd0\expndtw0\kerning0
cs241\
\cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Hey!\
./shell -f commands.txt\
(pid=1234)/home/user$ \cf10 \expnd0\expndtw0\kerning0
cd \cf1 \expnd0\expndtw0\kerning0
cs241\
(pid=1234)/home/user/cs241$ \cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Hey!\
Command executed by \cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1235\
Hey!\
(pid=1234)/home/user/cs241$ \cf10 \expnd0\expndtw0\kerning0
exit\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Specifics
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Prompting
\f0\fs28 \expnd0\expndtw0\kerning0
\
When prompting for a command, your shell should print a prompt in the following format:\
\pard\pardeftab720

\f2\fs32 \cf11 \cb9 \expnd0\expndtw0\kerning0
(\cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
<pid>\cf11 \expnd0\expndtw0\kerning0
)\cf1 \expnd0\expndtw0\kerning0
<path>\cf12 \cb13 \expnd0\expndtw0\kerning0
$\cf1 \cb9 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
<pid>
\f0 \expnd0\expndtw0\kerning0
 is the current process ID, and 
\f2 \expnd0\expndtw0\kerning0
<path>
\f0 \expnd0\expndtw0\kerning0
 is a path to the current working directory. Note the lack of a newline at the end of this prompt.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Reading in the Command
\f0\fs28 \expnd0\expndtw0\kerning0
\
The shell will read in a command from 
\f2 \expnd0\expndtw0\kerning0
stdin
\f0 \expnd0\expndtw0\kerning0
 (or a file if 
\f2 \expnd0\expndtw0\kerning0
-f
\f0 \expnd0\expndtw0\kerning0
 was specified).\

\f1\fs48 \expnd0\expndtw0\kerning0
Running the Command
\f0\fs28 \expnd0\expndtw0\kerning0
\
The shell should run the command that was read in previously.\
If the command is run by a new process, the PID of the process should be printed like this:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
Command executed by \cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
<pid>\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
This should be printed before any of the output of the command is printed.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
History
\f0\fs28 \expnd0\expndtw0\kerning0
\
Your shell should store the command that was just executed. Every command should be stored unless otherwise noted.\

\f1\fs48 \expnd0\expndtw0\kerning0
Ignore Ctrl+C
\f0\fs28 \expnd0\expndtw0\kerning0
\
Usually when we do 
\i \expnd0\expndtw0\kerning0
Ctrl+C
\i0 \expnd0\expndtw0\kerning0
, the current running program will exit. However, we want the shell to ignore the 
\i \expnd0\expndtw0\kerning0
Ctrl+C signal
\i0 \expnd0\expndtw0\kerning0
. The shell will not exit when a 
\i \expnd0\expndtw0\kerning0
Ctrl+C
\i0 \expnd0\expndtw0\kerning0
 signal comes.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Commands
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Shell supports two types of commands: built-in and non-built-in. While built-in commands are executed without creating a new process, a non-built-in command MUST create a new process to execute the program for that particular command.\
Words in a command will be separated by a single space, and there will be no extra whitespace anywhere in the command. Your shell does not need to support quotes (for example, 
\f2 \expnd0\expndtw0\kerning0
echo "hello there"
\f0 \expnd0\expndtw0\kerning0
). We will not test a blank line.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Built-in Commands
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f2\fs48 \cf6 \expnd0\expndtw0\kerning0
cd <path>\
\pard\pardeftab720

\f0\fs28 \cf6 \expnd0\expndtw0\kerning0
Changes the current working directory of the shell to 
\f2 \expnd0\expndtw0\kerning0
<path>
\f0 \expnd0\expndtw0\kerning0
. The starting point for pathnames that don\'92t start with 
\f2 \expnd0\expndtw0\kerning0
/
\f0 \expnd0\expndtw0\kerning0
 will be the current directory.\
If there is an error, then the shell should print 
\f2 \expnd0\expndtw0\kerning0
<path>: No such file or directory
\f0 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
(pid=1234)/home/user$ \cf10 \expnd0\expndtw0\kerning0
cd \cf1 \expnd0\expndtw0\kerning0
code\
(pid=1234)/home/user/code$ \cf10 \expnd0\expndtw0\kerning0
cd \cf1 \expnd0\expndtw0\kerning0
imaginary_directory\
imaginary_directory: No such file or directory\
\pard\pardeftab720
\cf11 \expnd0\expndtw0\kerning0
(\cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1234\cf11 \expnd0\expndtw0\kerning0
)\cf1 \expnd0\expndtw0\kerning0
/home/user/code\cf12 \cb13 \expnd0\expndtw0\kerning0
$\cf1 \cb9 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs48 \cf6 \cb1 \expnd0\expndtw0\kerning0
exit\
\pard\pardeftab720

\f0\fs28 \cf6 \expnd0\expndtw0\kerning0
Terminates the shell and saves the history of the shell if 
\f2 \expnd0\expndtw0\kerning0
-h
\f0 \expnd0\expndtw0\kerning0
 was specified.\
\pard\pardeftab720

\f2\fs48 \cf6 \expnd0\expndtw0\kerning0
!history\
\pard\pardeftab720

\f0\fs28 \cf6 \expnd0\expndtw0\kerning0
Prints for each command (in chronological order) its line number (0 indexed), a tab, the command itself, and a newline. Do not store this command in the history.\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
(pid=1234)/home/user$ !history\
0    ls -l\
1    \cf10 \expnd0\expndtw0\kerning0
pwd\
\cf1 \expnd0\expndtw0\kerning0
2    ps\
\pard\pardeftab720
\cf11 \expnd0\expndtw0\kerning0
(\cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1234\cf11 \expnd0\expndtw0\kerning0
)\cf1 \expnd0\expndtw0\kerning0
/home/user\cf12 \cb13 \expnd0\expndtw0\kerning0
$\cf1 \cb9 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs48 \cf6 \cb1 \expnd0\expndtw0\kerning0
#<n>\
\pard\pardeftab720

\f0\fs28 \cf6 \expnd0\expndtw0\kerning0
Prints and executes the nth command in history (chronological order), where n is a non-negative integer. Other values of n will not be tested. Note that the command run should be stored in the history. If n is not a valid index then print 
\f2 \expnd0\expndtw0\kerning0
Invalid Index
\f0 \expnd0\expndtw0\kerning0
, and do not store anything in the history. Note that this command is never stored in the history, only the command that is being referenced in the history. The following example assumes a fresh history:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
(pid=1234)/home/user$ echo Echo This!\
Command executed by pid=1235\
Echo This!\
(pid=1234)/home/user$ echo Another echo\
Command executed by pid=1236\
Another echo\
(pid=1234)/home/user$ !history\
0    echo Echo This!\
1    echo Another echo\
(pid=1234)/home/user$ #1\
echo Another echo\
Command executed by pid=1237\
Another echo\
(pid=1234)/home/user$ #9001\
Invalid Index\
(pid=1234)/home/user$ !history\
0    echo Echo This!\
1    echo Another echo\
2    echo Another echo\
(pid=1234)/home/user$\
\pard\pardeftab720

\fs48 \cf6 \cb1 \expnd0\expndtw0\kerning0
!<prefix>\
\pard\pardeftab720

\f0\fs28 \cf6 \expnd0\expndtw0\kerning0
Prints and executes the last command that has the specified prefix. Note that the command run should be stored in the history. If no match is found print 
\f2 \expnd0\expndtw0\kerning0
No Match
\f0 \expnd0\expndtw0\kerning0
, and do not store anything in the history. Note that this command is never stored in the history, only the command that is being referenced in the history. The following example assumes a fresh history:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
(pid=1234)/home/user$ \cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Echo This!\
Command executed by \cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1235\
Echo This!\
(pid=1234)/home/user$ \cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Another \cf10 \expnd0\expndtw0\kerning0
echo\
\cf1 \expnd0\expndtw0\kerning0
Command executed by \cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1236\
Another \cf10 \expnd0\expndtw0\kerning0
echo\cf1 \expnd0\expndtw0\kerning0
\
(pid=1234)/home/user$ !e\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Another \cf10 \expnd0\expndtw0\kerning0
echo\
\pard\pardeftab720
\cf1 \expnd0\expndtw0\kerning0
Command executed by \cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1237\
Another \cf10 \expnd0\expndtw0\kerning0
echo\cf1 \expnd0\expndtw0\kerning0
\
(pid=1234)/home/user$ !echo E\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Echo This!\
Command executed by \cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1238\
Echo This!\
(pid=1234)/home/user$ !d\
No Match\
(pid=1234)/home/user$ !history\
0    \cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Echo This!\
1    \cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Another \cf10 \expnd0\expndtw0\kerning0
echo\
\pard\pardeftab720
\cf1 \expnd0\expndtw0\kerning0
2    \cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Another \cf10 \expnd0\expndtw0\kerning0
echo\
\cf1 \expnd0\expndtw0\kerning0
3    \cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
Echo This!\
\pard\pardeftab720
\cf11 \expnd0\expndtw0\kerning0
(\cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1234\cf11 \expnd0\expndtw0\kerning0
)\cf1 \expnd0\expndtw0\kerning0
/home/user\cf12 \cb13 \expnd0\expndtw0\kerning0
$\cf1 \cb9 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Non-built-in Commands
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
For commands that are not built-in, the shell should consider the command name to be the name of a file that contains executable binary code. Such a code must be executed in a process different from the one executing the shell. You must use 
\f2 \expnd0\expndtw0\kerning0
fork()
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
exec()
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
wait()
\f0 \expnd0\expndtw0\kerning0
.\
The 
\f2 \expnd0\expndtw0\kerning0
fork()
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
exec()
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
wait()
\f0 \expnd0\expndtw0\kerning0
 paradigm is as follows: 
\f2 \expnd0\expndtw0\kerning0
fork()
\f0 \expnd0\expndtw0\kerning0
 a child process. The child process must execute the command with 
\f2 \expnd0\expndtw0\kerning0
exec()
\f0 \expnd0\expndtw0\kerning0
, while the parent must 
\f2 \expnd0\expndtw0\kerning0
wait()
\f0 \expnd0\expndtw0\kerning0
 for the child to terminate before printing the next prompt. It is important to note that, upon a successful execution of the command, 
\f2 \expnd0\expndtw0\kerning0
exec()
\f0 \expnd0\expndtw0\kerning0
 never returns to the child process. 
\f2 \expnd0\expndtw0\kerning0
exec()
\f0 \expnd0\expndtw0\kerning0
 only returns to the child process when the command fails to execute successfully. In that case, shell should print (without the quotes): \'93xxx: not found\'94, where xxx is the executable name. For example:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
(pid=1234)/home/user$ invalid_command --flag-that-is-ignored also_ignored also_ignored\
Command executed by \cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1235\
invalid_command: not found\
\pard\pardeftab720
\cf11 \expnd0\expndtw0\kerning0
(\cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1234\cf11 \expnd0\expndtw0\kerning0
)\cf1 \expnd0\expndtw0\kerning0
/home/user\cf12 \cb13 \expnd0\expndtw0\kerning0
$\cf1 \cb9 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Note that all non-built-in commands should be stored in the history, even ones that are invalid.\
Some non built-in commands that you may try to see whether your Shell works as it should are:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
/bin/ls\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
pwd\
\pard\pardeftab720
\cf1 \expnd0\expndtw0\kerning0
ps\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
echo \cf1 \expnd0\expndtw0\kerning0
hello\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Please read the disclaimer at the top of the page! We don\'92t want to have to give any failing grades.\
\pard\pardeftab720

\f2\fs48 \cf6 \expnd0\expndtw0\kerning0
&\
\pard\pardeftab720

\f0\fs28 \cf6 \expnd0\expndtw0\kerning0
A command suffixed with & should be run in the background. The shell should be ready to take the next command before the given command has finished running. There may or may not be a single space between the rest of the command and 
\f2 \expnd0\expndtw0\kerning0
&
\f0 \expnd0\expndtw0\kerning0
. For example, 
\f2 \expnd0\expndtw0\kerning0
pwd&
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
pwd &
\f0 \expnd0\expndtw0\kerning0
 are both valid. Additionally, since spawning a background process introduces a race condition, it is okay if the prompt gets misaligned as in the following example:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
(pid=1873)/home/user$ \cf10 \expnd0\expndtw0\kerning0
pwd\cf1 \expnd0\expndtw0\kerning0
 &\
(pid=1873)/home/user$ Command executed by \cf10 \expnd0\expndtw0\kerning0
pid\cf11 \expnd0\expndtw0\kerning0
=\cf1 \expnd0\expndtw0\kerning0
1874\
/home/user\
When I \cf10 \expnd0\expndtw0\kerning0
type\cf1 \expnd0\expndtw0\kerning0
, it shows up on this line\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Grading, Submission, and Other Details
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Please fully read details on {\field{\*\fldinst{HYPERLINK "https://courses.engr.illinois.edu/cs241/#/overview%23integrity"}}{\fldrslt \cf14 \expnd0\expndtw0\kerning0
Academic Honesty}}. These are shared between all MPs in CS 241.\
We will be using Subversion as our hand-in system this semester. Our grading system will checkout your most recent (pre-deadline) commit for grading. Therefore, to hand in your code, all you have to do is commit it to your Subversion repository.\
To check out the provided code for 
\f2 \expnd0\expndtw0\kerning0
vector
\f0 \expnd0\expndtw0\kerning0
 from the class repository, go to your cs241 directory (the one you checked out for \'93know your tools\'94) and run:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
svn up\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
If you run 
\f2 \expnd0\expndtw0\kerning0
ls
\f0 \expnd0\expndtw0\kerning0
 you will now see a 
\f2 \expnd0\expndtw0\kerning0
vector
\f0 \expnd0\expndtw0\kerning0
 folder, where you can find this assignment! To commit your changes (send them to us) type:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
svn ci -m \cf15 \expnd0\expndtw0\kerning0
"shell submission"\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Your repository directory can be viewed from a web browser from the following URL: {\field{\*\fldinst{HYPERLINK "https://subversion.ews.illinois.edu/svn/sp16-cs241/NETID/shell"}}{\fldrslt \cf14 \expnd0\expndtw0\kerning0
https://subversion.ews.illinois.edu/svn/sp16-cs241/NETID/shell}} where NETID is your University NetID. It is important to check that the files you expect to be graded are present and up to date in your svn copy.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Compile and Run
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Because we have provided 
\f2 \expnd0\expndtw0\kerning0
Log
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
Vector
\f0 \expnd0\expndtw0\kerning0
 as precompiled archive files, please make sure to work on this assignment on your student VM. We can\'92t say what will happen on any other machine when you try to compile the assignment.\
To compile the release version of the code run:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
make\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
This will compile your code with some optimizations enabled. If you use a debugger on the \'91release\'92 build, it will not be able to show you the original source code, or line numbers, most of the time. Optimizations sometimes expose some bugs in your code that would not show up when no optimizations are enabled, but since optimizations tend to reorder your code while compiling, an optimized version of your code is not optimal for debugging.\
To compile your code in debug mode, run 
\f2 \expnd0\expndtw0\kerning0
make debug
\f0 \expnd0\expndtw0\kerning0
 instead of 
\f2 \expnd0\expndtw0\kerning0
make
\f0 \expnd0\expndtw0\kerning0
\
If you compile in release mode, you will an executable called 
\f2 \expnd0\expndtw0\kerning0
shell
\f0 \expnd0\expndtw0\kerning0
. If you compile in debug mode, you will get an executable call 
\f2 \expnd0\expndtw0\kerning0
shell-debug
\f0 \expnd0\expndtw0\kerning0
.}