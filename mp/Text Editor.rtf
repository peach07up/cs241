{\rtf1\ansi\ansicpg936\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red48\green58\blue166;\red51\green51\blue51;\red249\green249\blue249;
\red98\green98\blue98;\red26\green26\blue26;\red66\green199\blue218;\red19\green151\blue241;\red29\green30\blue26;
\red246\green246\blue239;\red98\green94\blue76;\red252\green34\blue110;\red224\green213\blue97;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\fs48 \cf1 \cb2 \expnd0\expndtw0\kerning0
menu
\fs52 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf1 \expnd0\expndtw0\kerning0
Title
\fs40 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf1 \cb2 CS 241 : System Programming\cb1 \
\pard\pardeftab720

\fs28 \cf1 \cb2 \expnd0\expndtw0\kerning0
Add spacer, to align navigation to the right\cb1 \expnd0\expndtw0\kerning0
\
\
\cb2 \expnd0\expndtw0\kerning0
Navigation. We hide it in small screens.
\fs26 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt \cf1 \cb2 Overview}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf1 \cb2 MPs}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cb2 Lab Sections}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cb2 Getting Help}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cb2 Schedule}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cb2 Meet the Crew!}}\
\pard\pardeftab720

\fs40 \cf3 \cb4 \expnd0\expndtw0\kerning0
CS 241\cb1 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt 
\fs26 \cf5 \cb4 \expnd0\expndtw0\kerning0
Overview}}
\fs26 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
MPs}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Lab Sections}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Getting Help}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Schedule}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Meet the Crew!}}\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your content goes here\
\pard\pardeftab720

\fs112 \cf6 \expnd0\expndtw0\kerning0
Text Editor\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\b \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Due Date(s):
\b0 \expnd0\expndtw0\kerning0
 02/15 11:59pm 
\fs26 \expnd0\expndtw0\kerning0
Contents\uc0\u8232 
\fs32 \cf7 \expnd0\expndtw0\kerning0
Backstory\uc0\u8232 Overview\u8232 Reference Implementation\u8232 Format Library\u8232 Features\u8232 Display contents\u8232 Writing and Appending Text\u8232 Deleting text\u8232 Finding Text\u8232 Saving Text\u8232 Quitting Your Text Editor\u8232 Awesome Scripts\u8232 Grading, Submission, and Other Details\u8232 Compile and Run
\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Backstory
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
You have just finished implementing a 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 library and now your mentor wants you to implement a text editor using your 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 library. Since you\'92ve already turned your 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 library over to the QA team, who has run a \expnd0\expndtw0\kerning0
\strike \strikec6 brutal\expnd0\expndtw0\kerning0
\strike0\striked0  comprehensive set of tests (and fixed any bugs they found), your mentor has decided to provide you with a compiled version of the post-QA 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
Vector
\f0 \expnd0\expndtw0\kerning0
 (as an \'93archive file\'94) for use in your text editor.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Overview
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your editor can be run like any other editor with:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor <filename>\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
The filename provided will be loaded into the 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 for manipulation using 
\f2 \expnd0\expndtw0\kerning0
Document_create_from_file()
\f0 \expnd0\expndtw0\kerning0
. Then, editor_main.c reads commands from 
\f2 \expnd0\expndtw0\kerning0
stdin
\f0 \expnd0\expndtw0\kerning0
. When a command is read, the appropriate function in editor.c is called. You will need to fill in the functions in 
\f2 \expnd0\expndtw0\kerning0
editor.c
\f0 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\b \cf6 \expnd0\expndtw0\kerning0
Important:
\b0 \expnd0\expndtw0\kerning0
 Lines will be 1 indexed for this assignment!\

\b \expnd0\expndtw0\kerning0
Important:
\b0 \expnd0\expndtw0\kerning0
 Send all your debug printing to 
\f2 \expnd0\expndtw0\kerning0
stderr
\f0 \expnd0\expndtw0\kerning0
 instead of 
\f2 \expnd0\expndtw0\kerning0
stdout
\f0 \expnd0\expndtw0\kerning0
.\
Please keep the following in mind when implementing your text editor:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Lines are 1 indexed (are they 1 indexed in the document? Be careful!)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
There is no limit on the number of lines\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
There is no limit on the number of characters per line\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Some lines may be empty (you should treat these as \'93\'94)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Only when the user gives the save command will the contents of the file on disk be modified.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
All your editor operations should use the 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 library to modify the document. Don\'92t write directly to the file!\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Reference Implementation
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
In case some of the documentation does not go into detail on edge cases or if you have questions on how your text editor should behave under certain conditions, please refer to 
\f2 \expnd0\expndtw0\kerning0
editor_reference
\f0 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\f2 \cf6 \expnd0\expndtw0\kerning0
editor_reference
\f0 \expnd0\expndtw0\kerning0
 is an executable that the company stole (don\'92t ask), which is what your manager wants implemented, since the company does not have its source code. For evaluation purposes 
\f2 \expnd0\expndtw0\kerning0
editor_reference
\f0 \expnd0\expndtw0\kerning0
 is the final say for how your editor should behave.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Format Library
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
We have provided a format library that handles all printing to 
\f2 \expnd0\expndtw0\kerning0
stdout
\f0 \expnd0\expndtw0\kerning0
. This is to ensure that you do not lose points for not matching the format that the autograder expects.\
Please take a look at 
\f2 \expnd0\expndtw0\kerning0
format.c
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
format.h
\f0 \expnd0\expndtw0\kerning0
. These files include all the error messages and print outs that you need. (There is also an easter egg function that might come in handy for multi line writes)\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Features
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Make sure you can perform the following basic tasks from your editor program:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Display the contents of a file.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Write and append text to a file at a specified line number.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Delete text from a file at a specified line number.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Find text in a file and display the matching text with the line number.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Save the file to disk.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Quit the editor\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Display contents
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your text editor should be able to print out the content of the file/Document that is loaded.\
Your editor provides two print commands:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
print a single line\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
print the whole Document\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
print a single line
\f0\fs28 \expnd0\expndtw0\kerning0
\
The user will provide the \'93p\'94 command along with a line number when they want to print out a single line from a file. It\'92s also useful to get some context, so we will print out the 5 lines above and below this line for them as well. If there are not 5 lines above or below the requested line (say the line requested is line 2), then print out as many lines as you can, up to 5.\
To print the contents of the file 
\f2 \expnd0\expndtw0\kerning0
editor.h
\f0 \expnd0\expndtw0\kerning0
 using the editor, the user would first open the file with the editor:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor editor.h\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Then, to print out whatever is on the 30th line of this file, type:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
p 30\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Then hit enter.\
The editor will now print out line 30 of the file (including five lines above and below for context). (this is done by calling 
\f2 \expnd0\expndtw0\kerning0
handle_display_command()
\f0 \expnd0\expndtw0\kerning0
 in 
\f2 \expnd0\expndtw0\kerning0
editor.c
\f0 \expnd0\expndtw0\kerning0
 with the string \'93p 3\'94 as 
\f2 \expnd0\expndtw0\kerning0
command
\f0 \expnd0\expndtw0\kerning0
).\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor editor.h\
p 30\
25	 * based on the command passed in.\
26	*/\
27	void handle_append_command(Document *document, const char *command);\
28\
29	/**\
30	 * Handles deleting from the document\
31	 * based on the command passed in.\
32	*/\
33	void handle_delete_command(Document *document, const char *command);\
34\
35	/**\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Suppose we had a file 
\f2 \expnd0\expndtw0\kerning0
things_on_my_table.txt
\f0 \expnd0\expndtw0\kerning0
 which contained the following:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
mug\
salt\
T.V. remote\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
(since I am very clean there are only three things on my table)\
If we try to print out line 3 of this file, the printout will include up to 5 lines above and below the line specified:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor things_on_my_table.txt\
p 2\
1    mug\
2    salt\
3    T.V. remote\
\pard\pardeftab720

\f0\b\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Important:
\b0 \expnd0\expndtw0\kerning0
 the \'93p\'94 command includes line numbers in it\'92s print out. Make sure to use 
\f2 \expnd0\expndtw0\kerning0
format.\{c,h\}
\f0 \expnd0\expndtw0\kerning0
 to print this line out. Remember that lines are 1 indexed, but make sure to take a look at 
\f2 \expnd0\expndtw0\kerning0
format.c
\f0 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
print the whole document
\f0\fs28 \expnd0\expndtw0\kerning0
\
The user will provide the \'93p\'94 command (with no line number specified) when they wish to print the whole document.\
For example (using the same file we used above):\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor things_on_my_table.txt\
p\
1    mug\
2    salt\
3    T.V. remote\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Again, make sure to use 
\f2 \expnd0\expndtw0\kerning0
format.\{c,h\}
\f0 \expnd0\expndtw0\kerning0
 to print these lines out.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Errors
\f0\fs28 \expnd0\expndtw0\kerning0
\
If the user asks you to print a document which is empty (calls \'93p\'94 with or without a line number on an empty document), use 
\f2 \expnd0\expndtw0\kerning0
print_document_empty_error()
\f0 \expnd0\expndtw0\kerning0
 in 
\f2 \expnd0\expndtw0\kerning0
format.\{c,h\}
\f0 \expnd0\expndtw0\kerning0
 to tell them they can\'92t do that.\
If a user asks you to print a specific line which does not exist, please call 
\f2 \expnd0\expndtw0\kerning0
invalid_line()
\f0 \expnd0\expndtw0\kerning0
 in 
\f2 \expnd0\expndtw0\kerning0
format.\{c,h\}
\f0 \expnd0\expndtw0\kerning0
 to let them know.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Writing and Appending Text
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
There are two write modes for your editor: \'93write\'94 and \'93append\'94.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
write command
\f0\fs28 \expnd0\expndtw0\kerning0
\
The \'93w\'94 command should 
\b \expnd0\expndtw0\kerning0
OVERWRITE
\b0 \expnd0\expndtw0\kerning0
 a line completely. For example:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
w 3 I like cats!\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
This will 
\b \expnd0\expndtw0\kerning0
OVERWRITE
\b0 \expnd0\expndtw0\kerning0
 line 3 with \'93I like cats!\'94.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
append command
\f0\fs28 \expnd0\expndtw0\kerning0
\
\'93a\'94 will 
\b \expnd0\expndtw0\kerning0
APPEND
\b0 \expnd0\expndtw0\kerning0
 it\'92s argument to the end of a line. For example, if line three contained \'93I like cats!\'94, then the user ran this command:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
a 3  I also like dogs.\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
(append the string \'93 I also like dogs.\'94 to line three, notice the extra space)\
They should then be able to run the print command and see the following output:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
1   mug\
2   salt\
3   I like cats! I also like dogs.\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Note: If the line a user is appending to is currently empty, that\'92s fine!\
Note: If your editor is asked to write or append to a line that does not exist yet, then it should fill in the gap with empty lines. (How can you use 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 to make this easy?)\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
muti-line writes or appends
\f0\fs28 \expnd0\expndtw0\kerning0
\
An extra feature your editor needs to account for is multi-line writes. For example, the user can input the following:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
w 3 I like cats!\cf10 \expnd0\expndtw0\kerning0
$Dogs\cf1 \expnd0\expndtw0\kerning0
 are alright.\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
This will OVERWRITE line 3 with \'93I like cats!\'94.\
Second, because there is a \'93$\'94, this will ALSO create a NEW line (the new line four) reading \'93Dogs are alright.\'94.\
The old line 4 and all subsequent lines after get shifted down. Both the \'93w\'94 and \'93a\'94 modes may contain multiple dollar signs, and an additional line should be inserted for each.\
So, for a complete example:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor things_on_my_table.txt\
p\
1   mug\
2   salt\
3   I like cats!\
a 3  I also like dogs\cf10 \expnd0\expndtw0\kerning0
$But\cf1 \expnd0\expndtw0\kerning0
 I prefer cats.\
p\
1   mug\
2   salt\
3   I like cats! I also like dogs\
4   But I prefer cats.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Deleting text
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
The \'93d\'94 command should delete a single line from a file. For example:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor things_on_my_table.txt\
p\
1    mug\
2    salt\
3    I like cats!\
4    Dogs are alright.\
d 3\
p\
1    mug\
2    salt\
3    Dogs are alright.\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Notice that the line \'93Dogs are alright\'94 shifted up. (Is there anything in 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 that might help you with this?)\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Errors
\f0\fs28 \expnd0\expndtw0\kerning0
\
If a user attempts to delete a line which does not exist, let them know! Call 
\f2 \expnd0\expndtw0\kerning0
invalid_line
\f0 \expnd0\expndtw0\kerning0
 from 
\f2 \expnd0\expndtw0\kerning0
format.h
\f0 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Finding Text
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your text editor should be able to find all occurrences of a word and display the occurrences of the word with the line number the word occurred on.\
If your user inputs the following into standard input:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
/like cats\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Then your text editor should print all occurrences (the whole line) with their line numbers in following format:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
3    I [like cats]!\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
You only need to surround the first occurrence of the search term in each line with square brackets. Use the 
\f2 \expnd0\expndtw0\kerning0
print_search_line()
\f0 \expnd0\expndtw0\kerning0
 function in 
\f2 \expnd0\expndtw0\kerning0
format.h
\f0 \expnd0\expndtw0\kerning0
 for this.\
So, for another example, suppose I had a file 
\f2 \expnd0\expndtw0\kerning0
kitties.txt
\f0 \expnd0\expndtw0\kerning0
 with the content:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
I like cats\
I like cats\
Dogs are alright\
I like cats\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
And I ran a search operation:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor kitties.txt\
/cats\
1	I like [cats]\
2	I like [cats]\
4	I like [cats]\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Saving Text
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your text editor should be able to save all of the changes you make to the file on disk (otherwise, what\'92s the point?)\
The save command is just the character \'93s\'94\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
s\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Quitting Your Text Editor
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your text editor should be able to quit without memory leaks.\
So if your user inputs the following into standard input:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
q\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Then your text editor should quit and free/destroy your 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 (even if there are changes the user has not saved).\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Awesome Scripts
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Since the editor reads commands from standard in, we can create a file, fill it with commands, then send those commands to the editor.\
Suppose you think 241 is the best class ever and you want to write a script that makes sure everyone else knows that too. Create a file containing the following:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
w 1 I LOVE 241\
w 2 241 is my FAVORITE class at UIUC\
w 3 I\cf10 \expnd0\expndtw0\kerning0
$LOVE$CS$241\cf1 \expnd0\expndtw0\kerning0
\
s\
q\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Lets try running this two different ways. First, on a file that doesn\'92t exist:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor new_file < script\
p\
1   I LOVE 241\
2   241 is my FAVORITE class at UIUC\
3   I\
4   LOVE\
5   CS\
6   241\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
And on a file that already has some content:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
$ ./editor editor.c < script\
$ head editor.c\
I LOVE 241\
241 is my FAVORITE class at UIUC\
I\
LOVE\
CS\
241\
\
\pard\pardeftab720
\cf11 \expnd0\expndtw0\kerning0
#include <stdio.h>\cf1 \expnd0\expndtw0\kerning0
\
\cf11 \expnd0\expndtw0\kerning0
#include <stdlib.h>\cf1 \expnd0\expndtw0\kerning0
\
\cf11 \expnd0\expndtw0\kerning0
#include <string.h>\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Scripts like this might be able to help you debug. Perhaps you can impress your mentor with a bash script (google it) that run some editor scripts over some files you create, then uses the tool 
\f2 \expnd0\expndtw0\kerning0
diff
\f0 \expnd0\expndtw0\kerning0
 (check the man pages) to make sure your editor did the right thing.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Grading, Submission, and Other Details
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Please fully read details on {\field{\*\fldinst{HYPERLINK "https://courses.engr.illinois.edu/cs241/#/overview%23integrity"}}{\fldrslt \cf12 \expnd0\expndtw0\kerning0
Academic Honesty}}. These are shared between all MPs in CS 241.\
We will be using Subversion as our hand-in system this semester. Our grading system will checkout your most recent (pre-deadline) commit for grading. Therefore, to hand in your code, all you have to do is commit it to your Subversion repository.\
To check out the provided code for 
\f2 \expnd0\expndtw0\kerning0
text_editor
\f0 \expnd0\expndtw0\kerning0
 from the class repository, go to your cs241 directory (the one you checked out for \'93know your tools\'94) and run:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
svn up\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
If you run 
\f2 \expnd0\expndtw0\kerning0
ls
\f0 \expnd0\expndtw0\kerning0
 you will now see a 
\f2 \expnd0\expndtw0\kerning0
text_editor
\f0 \expnd0\expndtw0\kerning0
 folder, where you can find this assignment! To commit your changes (send them to us) type:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
svn ci -m \cf13 \expnd0\expndtw0\kerning0
"mp2 submission"\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Your repository directory can be viewed from a web browser from the following URL: {\field{\*\fldinst{HYPERLINK "https://subversion.ews.illinois.edu/svn/sp16-cs241/NETID/text_editor"}}{\fldrslt \cf12 \expnd0\expndtw0\kerning0
https://subversion.ews.illinois.edu/svn/sp16-cs241/NETID/vector}} where NETID is your University NetID. It is important to check that the files you expect to be graded are present and up to date in your svn copy.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Only edit the following files
\f0\fs28 \expnd0\expndtw0\kerning0
\
We will only use the files in this list when running the autograder\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\f2 \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
editor.c
\f0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Compile and Run
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Because we have provided 
\f2 \expnd0\expndtw0\kerning0
Document
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
Vector
\f0 \expnd0\expndtw0\kerning0
 as a precompiled archive file, please make sure to work on this assignment on your student VM. We can\'92t say what will happen on any other machine when you try to compile the assignment.\
To compile the release version of the code run:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
make\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
This will compile your code with some optimizations enabled. If you use a debugger on the \'91release\'92 build, it will not be able to show you the original source code, or line numbers, most of the time. Optimizations sometimes expose some bugs in your code that would not show up when no optimizations are enabled, but since optimizations tend to reorder your code while compiling, an optimized version of your code is not optimal for debugging.\
To compile your code in debug mode, run 
\f2 \expnd0\expndtw0\kerning0
make debug
\f0 \expnd0\expndtw0\kerning0
 instead of 
\f2 \expnd0\expndtw0\kerning0
make
\f0 \expnd0\expndtw0\kerning0
\
If you compile in release mode, you will an executable called 
\f2 \expnd0\expndtw0\kerning0
editor
\f0 \expnd0\expndtw0\kerning0
. If you compile in debug mode, you will get an executable call 
\f2 \expnd0\expndtw0\kerning0
editor-debug
\f0 \expnd0\expndtw0\kerning0
\
We have also provided a file 
\f2 \expnd0\expndtw0\kerning0
editor_test.c
\f0 \expnd0\expndtw0\kerning0
 where you can programmatically test your editor. This compiles to 
\f2 \expnd0\expndtw0\kerning0
editor_test
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
editor_test-debug}