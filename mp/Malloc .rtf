{\rtf1\ansi\ansicpg936\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red48\green58\blue166;\red51\green51\blue51;\red249\green249\blue249;
\red98\green98\blue98;\red26\green26\blue26;\red66\green199\blue218;\red19\green151\blue241;\red252\green34\blue110;
\red88\green209\blue235;\red29\green30\blue26;\red244\green0\blue95;\red152\green224\blue36;\red246\green246\blue239;
\red98\green94\blue76;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\fs48 \cf1 \cb2 \expnd0\expndtw0\kerning0
menu
\fs52 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf1 \expnd0\expndtw0\kerning0
Title
\fs40 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf1 \cb2 CS 241 : System Programming\cb1 \
\pard\pardeftab720

\fs28 \cf1 \cb2 \expnd0\expndtw0\kerning0
Add spacer, to align navigation to the right\cb1 \expnd0\expndtw0\kerning0
\
\
\cb2 \expnd0\expndtw0\kerning0
Navigation. We hide it in small screens.
\fs26 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt \cf1 \cb2 Overview}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf1 \cb2 MPs}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cb2 Lab Sections}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cb2 Getting Help}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cb2 Schedule}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cb2 Meet the Crew!}}\
\pard\pardeftab720

\fs40 \cf3 \cb4 \expnd0\expndtw0\kerning0
CS 241\cb1 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt 
\fs26 \cf5 \cb4 \expnd0\expndtw0\kerning0
Overview}}
\fs26 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
MPs}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Lab Sections}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Getting Help}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Schedule}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Meet the Crew!}}\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your content goes here\
\pard\pardeftab720

\fs112 \cf6 \expnd0\expndtw0\kerning0
Malloc\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b \cf6 \expnd0\expndtw0\kerning0
Due Date(s):
\b0 \expnd0\expndtw0\kerning0
 \
Part 1 due 02/29 11:59pm \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Part 2 due 03/07 11:59pm 
\fs26 \expnd0\expndtw0\kerning0
Contents\uc0\u8232 
\fs32 \cf7 \expnd0\expndtw0\kerning0
Introduction\uc0\u8232 Overview\u8232 A Bad Example\u8232 Testing Your Code\u8232 Contest\u8232 Grading, Submission, and Other Details
\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Introduction
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
In the past, you have been using 
\f2 \expnd0\expndtw0\kerning0
malloc()
\f0 \expnd0\expndtw0\kerning0
 to allocate memory on the heap. In this MP, you will be implementing your own version of 
\f2 \expnd0\expndtw0\kerning0
malloc()
\f0 \expnd0\expndtw0\kerning0
. So by the end of this MP, you would theoretically be able to use your own malloc to compile and run any C code.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Overview
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
You should write your implementations of 
\f2 \expnd0\expndtw0\kerning0
calloc()
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
malloc()
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
realloc()
\f0 \expnd0\expndtw0\kerning0
, and 
\f2 \expnd0\expndtw0\kerning0
free()
\f0 \expnd0\expndtw0\kerning0
 in 
\f2 \expnd0\expndtw0\kerning0
alloc.c
\f0 \expnd0\expndtw0\kerning0
. 
\f2 \expnd0\expndtw0\kerning0
alloc.c
\f0 \expnd0\expndtw0\kerning0
 will be the only file we test.\
Don\'92t modify 
\f2 \expnd0\expndtw0\kerning0
mreplace.c
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
mcontest.c
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
alloc-contest.c
\f0 \expnd0\expndtw0\kerning0
. Those files create the environment that replaces the standard glibc malloc with your malloc. These files will be used for testing.\
Your 
\f2 \expnd0\expndtw0\kerning0
malloc()
\f0 \expnd0\expndtw0\kerning0
 must allocate heap memory using 
\f2 \expnd0\expndtw0\kerning0
sbrk()
\f0 \expnd0\expndtw0\kerning0
. You may not use files, pipes, system shared memory, 
\f2 \expnd0\expndtw0\kerning0
mmap()
\f0 \expnd0\expndtw0\kerning0
, a chunk of pre-defined stack memory, other external memory libraries found on the Internet, or any of the various other external sources of memory that exist on modern operating systems.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
A Bad Example
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Memory allocation seems like a mystery, but in actuality, we are making a wrapper around the system call {\field{\*\fldinst{HYPERLINK "http://linux.die.net/man/2/sbrk"}}{\fldrslt 
\f2 \cf9 \expnd0\expndtw0\kerning0
sbrk()}}. Here\'92s a really simple implementation of 
\f2 \expnd0\expndtw0\kerning0
malloc()
\f0 \expnd0\expndtw0\kerning0
:\
\pard\pardeftab720

\f2\fs32 \cf10 \cb11 \expnd0\expndtw0\kerning0
void\cf1 \expnd0\expndtw0\kerning0
 \cf12 \expnd0\expndtw0\kerning0
*\cf13 \expnd0\expndtw0\kerning0
malloc\cf14 \expnd0\expndtw0\kerning0
(\cf10 \expnd0\expndtw0\kerning0
size_t\cf1 \expnd0\expndtw0\kerning0
 \cf14 \expnd0\expndtw0\kerning0
size)\cf1 \expnd0\expndtw0\kerning0
 \cf14 \expnd0\expndtw0\kerning0
\{\cf1 \expnd0\expndtw0\kerning0
\
    \cf10 \expnd0\expndtw0\kerning0
return\cf1 \expnd0\expndtw0\kerning0
 \cf14 \expnd0\expndtw0\kerning0
sbrk(size);\cf1 \expnd0\expndtw0\kerning0
\
\cf14 \expnd0\expndtw0\kerning0
\}\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
As you can see, when we request 
\f2 \expnd0\expndtw0\kerning0
size
\f0 \expnd0\expndtw0\kerning0
 bytes of memory, we call 
\f2 \expnd0\expndtw0\kerning0
sbrk(size)
\f0 \expnd0\expndtw0\kerning0
 to increase the heap by 
\f2 \expnd0\expndtw0\kerning0
size
\f0 \expnd0\expndtw0\kerning0
 bytes. Then, we return a pointer to this memory, and we\'92re done. Simple!\
Here is our implementation of 
\f2 \expnd0\expndtw0\kerning0
free()
\f0 \expnd0\expndtw0\kerning0
:\
\pard\pardeftab720

\f2\fs32 \cf10 \cb11 \expnd0\expndtw0\kerning0
void\cf1 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
free\cf14 \expnd0\expndtw0\kerning0
(\cf10 \expnd0\expndtw0\kerning0
void\cf1 \expnd0\expndtw0\kerning0
 \cf12 \expnd0\expndtw0\kerning0
*\cf14 \expnd0\expndtw0\kerning0
ptr)\cf1 \expnd0\expndtw0\kerning0
 \cf14 \expnd0\expndtw0\kerning0
\{\cf1 \expnd0\expndtw0\kerning0
\
\cf14 \expnd0\expndtw0\kerning0
\}\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
This is a \'93correct\'94 way to implement 
\f2 \expnd0\expndtw0\kerning0
free()
\f0 \expnd0\expndtw0\kerning0
. However, the obvious drawback with our implementation is that we can\'92t reuse memory after we are done with it. Also, we have yet to implement 
\f2 \expnd0\expndtw0\kerning0
realloc()
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
calloc()
\f0 \expnd0\expndtw0\kerning0
. Finally, we also have to check for errors when we call {\field{\*\fldinst{HYPERLINK "http://linux.die.net/man/2/sbrk"}}{\fldrslt 
\f2 \cf9 \expnd0\expndtw0\kerning0
sbrk()}}.\
Despite all of this, this is still a \'93working\'94 implementation of 
\f2 \expnd0\expndtw0\kerning0
malloc()
\f0 \expnd0\expndtw0\kerning0
. So the job of 
\f2 \expnd0\expndtw0\kerning0
malloc()
\f0 \expnd0\expndtw0\kerning0
 is not really to allocate memory, it is to keep track of the memory we\'92ve allocated so that we can reuse it. You will use methods that you\'92ve learned in class and practiced in the mini-valgrind lab to do this.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Testing Your Code
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
In order to test your solution against the testers, run 
\f2 \expnd0\expndtw0\kerning0
./mcontest
\f0 \expnd0\expndtw0\kerning0
 with the tester you want. You MUST do this or your code will be run with the glibc implementation!\
Example:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
./mcontest testers_exe/tester-1\
Memory failed to allocate!\
\cf12 \expnd0\expndtw0\kerning0
[\cf1 \expnd0\expndtw0\kerning0
mcontest]: STATUS: \cf14 \expnd0\expndtw0\kerning0
FAILED\cf12 \expnd0\expndtw0\kerning0
=(\cf1 \expnd0\expndtw0\kerning0
256\cf12 \expnd0\expndtw0\kerning0
)\cf1 \expnd0\expndtw0\kerning0
\
\cf12 \expnd0\expndtw0\kerning0
[\cf1 \expnd0\expndtw0\kerning0
mcontest]: MAX: 0\
\cf12 \expnd0\expndtw0\kerning0
[\cf1 \expnd0\expndtw0\kerning0
mcontest]: AVG: 0.000000\
\cf12 \expnd0\expndtw0\kerning0
[\cf1 \expnd0\expndtw0\kerning0
mcontest]: TIME: 0.000000\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
We\'92ve also distributed a bash script 
\f2 \expnd0\expndtw0\kerning0
run_all_mcontest.sh
\f0 \expnd0\expndtw0\kerning0
 to run all testers.\
Here are what each of our error codes mean:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
11: Seg Fault\
15: Executed Too Long\
139: Seg Fault\
256, 512, 768, 1024: various errors \cf10 \expnd0\expndtw0\kerning0
in \cf1 \expnd0\expndtw0\kerning0
tester-# files\
16640: Dynamic linking error\
17408: Exceeded Memory Limit \cf12 \expnd0\expndtw0\kerning0
(\cf1 \expnd0\expndtw0\kerning0
2684354560\cf12 \expnd0\expndtw0\kerning0
)\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf6 \cb1 \expnd0\expndtw0\kerning0
Debugging
\f0\fs28 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f2 \cf6 \expnd0\expndtw0\kerning0
./mcontest
\f0 \expnd0\expndtw0\kerning0
 runs an optimized version of your code, so you won\'92t be able to debug with 
\f2 \expnd0\expndtw0\kerning0
gdb.
\f0 \expnd0\expndtw0\kerning0
 
\f2 \expnd0\expndtw0\kerning0
./mreplace
\f0 \expnd0\expndtw0\kerning0
 uses a version of your malloc which is compiled without optimization, so you can debug with 
\f2 \expnd0\expndtw0\kerning0
gdb.
\f0 \expnd0\expndtw0\kerning0
 Here\'92s an example, running tester2 with gdb:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
gdb --args ./mreplace testers_exe/tester-2\
\pard\pardeftab720

\f1\fs48 \cf6 \cb1 \expnd0\expndtw0\kerning0
Real programs
\f0\fs28 \expnd0\expndtw0\kerning0
\
Both 
\f2 \expnd0\expndtw0\kerning0
mcontest
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
mreplace
\f0 \expnd0\expndtw0\kerning0
 can be used to launch \'93real\'94 programs (not just the testers). For example:\
\pard\pardeftab720

\f2\fs32 \cf15 \cb11 \expnd0\expndtw0\kerning0
# ignore the warning about an invalid terminal, if you get it\cf1 \expnd0\expndtw0\kerning0
\
./mreplace /usr/bin/less alloc.c\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
or\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
./mcontest /bin/ls\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
There are some programs that might not work correctly under your malloc, for a variety of reasons. If you encounter one, post on piazza!\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Contest
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
The malloc contest pits your implementations of memory allocating functions against your fellow students. There are a few things to know:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The test cases provided will be used for grading. We may also use some real linux utilities (like ls).\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The memory limit is 2.500GB.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
To submit your program into the contest, you simply commit to subversion. Your most recent SVN submission will be fetched somewhat frequently.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
We will assign a score to each of the three categories (max heap, average heap, and total time) based on how well your program performs memory management relative to a standard solution.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
You can pick a nickname in 
\f2 \expnd0\expndtw0\kerning0
nickname.txt
\f0 \expnd0\expndtw0\kerning0
. You will show up as this name on the contest webpage.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
On the webpage, each test will have either be green, which signifies that you passed the test, or red, which signifies that you failed the test. Clicking on the failed test will give you more details on the error output of the test.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Your ranking will be determined by summing the following for each testcase: 
\f2 \expnd0\expndtw0\kerning0
.6 * max_memory + .2 * avg_memory + .2 * runtime
\f0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b \cf6 \expnd0\expndtw0\kerning0
WARNING:
\b0 \expnd0\expndtw0\kerning0
 Especially as the deadline approaches, the contest page will refresh slower and slower. There are 400 students, 11 test cases, and up to 30 seconds per test case. It will only retest a student\'92s code if it has been updated, but many more students will be updating their code causing longer waits. Start early, and don\'92t become reliant on the contest page by testing locally!\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Grading, Submission, and Other Details
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Please fully read details on {\field{\*\fldinst{HYPERLINK "https://courses.engr.illinois.edu/cs241/#/overview%23integrity"}}{\fldrslt \cf9 \expnd0\expndtw0\kerning0
Academic Honesty}}. These are shared between all MPs in CS 241.\
You will commit your code to the malloc folder in your subversion repository. Remember to only modify 
\f2 \expnd0\expndtw0\kerning0
alloc.c
\f0 \expnd0\expndtw0\kerning0
.\
Here is the grading breakdown:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Correctness (75%)\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls3\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Part 1 (25%): tests 1-6 complete successfully - due 02/29 11:59pm\
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Part 2 (50%): tests 1-11 complete successfully - due 03/07 11:59pm\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Performance (25%): Points only awarded if all part 2 testers complete successfully - due with part2\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
There are 11 testcases in total. For part 1 you will be graded using tests 1 through 6. For part 2 you will be graded using tests 1 to 11 (tests 1 through 6 get graded twice).\
There are also performance points, which you are only eligible for if you pass all the testcases. Your malloc will be compared against the 
\f2 \expnd0\expndtw0\kerning0
glibc
\f0 \expnd0\expndtw0\kerning0
 version of malloc, and given a performance score as a percentage. For example, if your malloc is 2 times slower than the 
\f2 \expnd0\expndtw0\kerning0
glibc
\f0 \expnd0\expndtw0\kerning0
 version of malloc, we will say it runs in 
\f2 \expnd0\expndtw0\kerning0
200%
\f0 \expnd0\expndtw0\kerning0
 of the performance of 
\f2 \expnd0\expndtw0\kerning0
glibc
\f0 \expnd0\expndtw0\kerning0
 malloc. Performance points are awarded in buckets:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Better than or equal to 200% of 
\f2 \expnd0\expndtw0\kerning0
glibc
\f0 \expnd0\expndtw0\kerning0
: Full 25% awarded.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
200-300% (exclude 200%, include 300%): 20% awarded.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
300-400%: 15% awarded.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
400-500%: 10% awarded.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
500% and worse: 0% awarded.\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
So lets work out some scenarios:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Scenario 1: A student gets tests 1 through 6 working for part1 and misses 2 tests on part2. Then they get all of the correctness points for part1, 9/11 of the correctness points for part2 and none of the performance points. Thus this student will receive a 
\f2 \expnd0\expndtw0\kerning0
(6 / 6) * 25 + (9 / 11) * 50 + 0 = 65.90%
\f0 \expnd0\expndtw0\kerning0
.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Scenario 2: A student gets none of the tests working for part1 and gets everything working for part2 and beats 
\f2 \expnd0\expndtw0\kerning0
glibc
\f0 \expnd0\expndtw0\kerning0
. Then they get none of the correctness points for part1, 11/11 of the correctness points for part2, and the performance points. This student will receive a 
\f2 \expnd0\expndtw0\kerning0
(0 / 6) * 25 + (11 / 11) * 50 + 25 = 75.00%
\f0 \expnd0\expndtw0\kerning0
.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Scenario 3: A student gets tests 1 through 6 working for part1, then they get all the tests expect test 4 working for part2. Then they get all of the correctness points for part1, 10/11 of the correctness points for part2, but they will not receive any of the performance points. This student will receive a 
\f2 \expnd0\expndtw0\kerning0
(6 / 6) * 25 + (10 / 11) * 50 + 0 = 70.45%
\f0 \expnd0\expndtw0\kerning0
.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Scenario 4: A student gets tests 1 through 6 working for part1, then they get all of the tests working for part2, but they never can only get to 
\f2 \expnd0\expndtw0\kerning0
350%
\f0 \expnd0\expndtw0\kerning0
 of 
\f2 \expnd0\expndtw0\kerning0
glibc
\f0 \expnd0\expndtw0\kerning0
. In this case, they get all of the correctness points for part 1, all of the correctness points for part 2, but only 15% performance points. So, they get 
\f2 \expnd0\expndtw0\kerning0
(6 / 6) * 25 + (11 / 11) * 50 + 15 = 89}