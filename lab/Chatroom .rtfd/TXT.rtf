{\rtf1\ansi\ansicpg936\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red48\green58\blue166;\red51\green51\blue51;\red249\green249\blue249;
\red98\green98\blue98;\red26\green26\blue26;\red66\green199\blue218;\red19\green151\blue241;\red29\green30\blue26;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\fs48 \cf1 \cb2 \expnd0\expndtw0\kerning0
menu
\fs52 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf1 \expnd0\expndtw0\kerning0
Title
\fs40 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf1 \cb2 CS 241 : System Programming\cb1 \
\pard\pardeftab720

\fs28 \cf1 \cb2 \expnd0\expndtw0\kerning0
Add spacer, to align navigation to the right\cb1 \expnd0\expndtw0\kerning0
\
\
\cb2 \expnd0\expndtw0\kerning0
Navigation. We hide it in small screens.
\fs26 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt \cf1 \cb2 Overview}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf1 \cb2 MPs}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cb2 Lab Sections}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cb2 Getting Help}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cb2 Schedule}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cb2 Meet the Crew!}}\
\pard\pardeftab720

\fs40 \cf3 \cb4 \expnd0\expndtw0\kerning0
CS 241\cb1 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt 
\fs26 \cf5 \cb4 \expnd0\expndtw0\kerning0
Overview}}
\fs26 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
MPs}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Lab Sections}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Getting Help}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Schedule}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Meet the Crew!}}\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your content goes here\
\pard\pardeftab720

\fs112 \cf6 \expnd0\expndtw0\kerning0
Chatroom\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\b \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Due Date(s):
\b0 \expnd0\expndtw0\kerning0
 04/20 11:59pm 
\fs26 \expnd0\expndtw0\kerning0
Contents\uc0\u8232 
\fs32 \cf7 \expnd0\expndtw0\kerning0
Learning Objectives\uc0\u8232 Goal\u8232 Client\u8232 Server\u8232 Error Checking\u8232 Testing\u8232 Grading
\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Learning Objectives
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0
\fs28 \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Networking Components\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Goal
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
The goal of this lab is to help you understand networking components. You will accomplish this by writing a real chatroom program. You are going to write a client which can send/receive data to/from server. You will also write a server which can recieve data from multiple clients and broadcast these messages to each of the clients. The files you must modify are\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
client.c\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
server.c\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
questions.txt (Not Graded)\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
The files 
\f2 \expnd0\expndtw0\kerning0
client.c
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
server.c
\f0 \expnd0\expndtw0\kerning0
 provide an outline of what you are expected to do via references to questions in questions.txt. For example, if you see /
\i \expnd0\expndtw0\kerning0
QUESTION 1
\i0 \expnd0\expndtw0\kerning0
/ then question 1 in 
\f2 \expnd0\expndtw0\kerning0
questions.txt
\f0 \expnd0\expndtw0\kerning0
 should help you understand what to do when filling that part of the code.\
\pard\pardeftab720

\b \cf6 \expnd0\expndtw0\kerning0
So be sure to answer the questions in 
\f3 \expnd0\expndtw0\kerning0
questions.txt
\f0 \expnd0\expndtw0\kerning0
 to begin with
\b0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Client
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
The file chatroom.c is the control center for setting up the nucurses windows (that\'92s a thing) and starting up a thread for the client code.\
The chatroom executable will accept three arguments: a host address, a port number, and a username.\
The client program should attempt to connect to the given port at the given host address. If any argument is missing, print a helpful message and exit. Set up your connection to be TCP and IPv4. Your program will read input from the user (could be 
\f2 \expnd0\expndtw0\kerning0
stdin
\f0 \expnd0\expndtw0\kerning0
, but we are using ncurses windows to make it look nice) and send it to the server it connected to. A signal interrupt will be sent to the client as a flag to tell your client to exit. To be precise, if while reading from user input your client receives a signal interrupt (
\f2 \expnd0\expndtw0\kerning0
SIGINT
\f0 \expnd0\expndtw0\kerning0
), free memory and close the client program. In 
\f2 \expnd0\expndtw0\kerning0
close_client()
\f0 \expnd0\expndtw0\kerning0
, you may notice 
\f2 \expnd0\expndtw0\kerning0
pthread_cancel()
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
pthread_join()
\f0 \expnd0\expndtw0\kerning0
 in succession which is due to ncurses. Here you should also (as the note says) 
\f2 \expnd0\expndtw0\kerning0
shutdown()
\f0 \expnd0\expndtw0\kerning0
 the socket. Also note that we provide two functions for you to read and write to the server, you can find the functions in 
\f2 \expnd0\expndtw0\kerning0
utils.h
\f0 \expnd0\expndtw0\kerning0
.\
The chatroom executable will also create a window_object and render a view for clients to chat with each other. We will provide two functions for you to read and write messages to the window object/screen. So your job is to manage the chat window and implement 
\f2 \expnd0\expndtw0\kerning0
run_client()
\f0 \expnd0\expndtw0\kerning0
 function that sets up a connection and runs threads for writing to server and reading from server.\
The figure below gives you an idea about how the client side architecture looks like: \expnd0\expndtw0\kerning0
{{\NeXTGraphic ClientArch.png.jpg \width20480 \height15360 \noorient
}¬}\expnd0\expndtw0\kerning0
\
So to sum up, your job in the client program is:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement run_client()\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls4\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f4 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Set up the network connection (TCP + IPv4).\
\ls4\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f4 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Launch threads to read from the server.\
\ls4\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f4 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Launch threads to write to server.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create a signal handler to catch interupt and end the program gracefully.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls4\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f4 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Free memory you allocate.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Server
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your server will accept a single argument: a port number. If the argument is not provided, print a helpful message and exit. Set up your server to work with TCP, IPv4, and be able to reuse ports. Your server should accept multiple client connections concurrently. Note that we want to limit the number of connections that the server handles, and this number is defined as the 
\f2 \expnd0\expndtw0\kerning0
MAX_CLIENTS
\f0 \expnd0\expndtw0\kerning0
 macro.\
In addition to setting up connections, you have to process messages from clients. We have provided you with the function 
\b \expnd0\expndtw0\kerning0
processClient
\b0 \expnd0\expndtw0\kerning0
 to handle reading from each client. You will need to implement the code to use this in your main function. The figure below illustrates how a message propagates through the system: \expnd0\expndtw0\kerning0
{{\NeXTGraphic MessageBroadcast.png.jpg \width20480 \height15360 \noorient
}¬}\expnd0\expndtw0\kerning0
\
Lastly, your server should close gracefully when 
\f2 \expnd0\expndtw0\kerning0
SIGINT
\f0 \expnd0\expndtw0\kerning0
 is sent to the program. This means you will need to implement a signal handler. To make your life easier, create threads in a detached state so that you do not have to later join with them. You will need to use these two functions (use man pages) along with 
\f2 \expnd0\expndtw0\kerning0
pthread_create
\f0 \expnd0\expndtw0\kerning0
: 
\f2 \expnd0\expndtw0\kerning0
pthread_attr_init pthread_attr_setdetachstate
\f0 \expnd0\expndtw0\kerning0
\
To sum up, you have to:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Set up connections.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement functionality for using 
\f2 \expnd0\expndtw0\kerning0
processClient()
\f0 \expnd0\expndtw0\kerning0
.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement a signal handler to handle a graceful shutdown.\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
Here is the overall client-server architecture: \expnd0\expndtw0\kerning0
{{\NeXTGraphic OverallArchitecture.png.jpg \width20480 \height15360 \noorient
}¬}\expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Error Checking
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Networks Break!
\f0\fs28 \expnd0\expndtw0\kerning0
\
Many things can go wrong when working with networks. Be sure to do plenty of error checking! If anything fails, print the error message and 
\b \expnd0\expndtw0\kerning0
exit(1)
\b0 \expnd0\expndtw0\kerning0
. For each networking function call (except one of them) that you will be using, use 
\b \expnd0\expndtw0\kerning0
perror(NULL)
\b0 \expnd0\expndtw0\kerning0
. For the one that you cannot use 
\f2 \expnd0\expndtw0\kerning0
perror
\f0 \expnd0\expndtw0\kerning0
, use the man pages to learn how to print the error. You must figure out which function does not set 
\f2 \expnd0\expndtw0\kerning0
errno
\f0 \expnd0\expndtw0\kerning0
 upon failure and thus you cannot use 
\f2 \expnd0\expndtw0\kerning0
perror
\f0 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Testing
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
You could implement tests for testing functionality of client and server side code separately. That way you don\'92t worry about client-server interactions. You can then consider cases where a message is written to one client, is sent to the server and is then broadcasted to all the other clients running. To test such a code path, you start a test that writes to one of the clients 
\b \expnd0\expndtw0\kerning0
c
\b0 \expnd0\expndtw0\kerning0
 and then verifies whether all the clients have received the message that was provided as input to 
\b \expnd0\expndtw0\kerning0
c
\b0 \expnd0\expndtw0\kerning0
.\
Note, you are writing a server that could potentially run for a long time. This is exactly a scenario where memory leaks can be very costly and cause your server to crash. So ensure there are no memory leaks in your implementation.\
Otherwise, we will leave it open ended to let you come up with other interesting test cases.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
We provided you with a Makefile.
\f0\fs28 \expnd0\expndtw0\kerning0
\
You can run the client and server as follows: 
\f2 \expnd0\expndtw0\kerning0
./chatroom [address] [port] [username] ./server [port]
\f0 \expnd0\expndtw0\kerning0
\
Test your server and client with a friend! On your VMs you can connect to each others\'92 machines. Just ask them what their machine number is!\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
 ./server 12345\
Waiting for connection...\
Connection made: client_fd=4\
cs241_student: hello there!\
^name_sucks: more bytes\
^CEnding Server\
 ./chatroom sp16-cs241-XYZ.cs.illinois.edu 12345 steve\
steve: hello there!\
alec: sending bytes\
^CClosing Client\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Notice the 
\b \expnd0\expndtw0\kerning0
XYZ
\b0 \expnd0\expndtw0\kerning0
, that is the machine number you will use to connect to the server (the person hosting\'92s machine) In the above \'93terminals\'94, there are things like \'93Waiting for connection\'85\'94 and \'93Ending Server\'94: do not worry about having to do this. It is simply flavor text printed to the window. Feel free to do that; we will only test the bytes that are sent and received. 
\b \expnd0\expndtw0\kerning0
Because it\'92s particularly important for this lab, we want to reiterate that you should not have any memory leaks :)
\b0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Grading
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0
\fs28 \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Client must function as specified\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Server must function as specified\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Errors must be handled as specified\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
No memory leaks (memory in use after exit is okay)}