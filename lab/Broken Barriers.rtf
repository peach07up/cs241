{\rtf1\ansi\ansicpg936\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red48\green58\blue166;\red51\green51\blue51;\red249\green249\blue249;
\red98\green98\blue98;\red26\green26\blue26;\red66\green199\blue218;\red19\green151\blue241;\red252\green34\blue110;
\red246\green246\blue239;\red29\green30\blue26;\red244\green0\blue95;\red88\green209\blue235;\red157\green101\blue255;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\fs48 \cf1 \cb2 \expnd0\expndtw0\kerning0
menu
\fs52 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf1 \expnd0\expndtw0\kerning0
Title
\fs40 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf1 \cb2 CS 241 : System Programming\cb1 \
\pard\pardeftab720

\fs28 \cf1 \cb2 \expnd0\expndtw0\kerning0
Add spacer, to align navigation to the right\cb1 \expnd0\expndtw0\kerning0
\
\
\cb2 \expnd0\expndtw0\kerning0
Navigation. We hide it in small screens.
\fs26 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt \cf1 \cb2 Overview}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf1 \cb2 \expnd0\expndtw0\kerning0
MPs}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cf1 \cb2 \expnd0\expndtw0\kerning0
Lab Sections}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cf1 \cb2 \expnd0\expndtw0\kerning0
Getting Help}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cf1 \cb2 \expnd0\expndtw0\kerning0
Schedule}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cf1 \cb2 \expnd0\expndtw0\kerning0
Meet the Crew!}}\
\pard\pardeftab720

\fs40 \cf3 \cb4 \expnd0\expndtw0\kerning0
CS 241\cb1 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt 
\fs26 \cf5 \cb4 \expnd0\expndtw0\kerning0
Overview}}
\fs26 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
MPs}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Lab Sections}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Getting Help}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Schedule}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Meet the Crew!}}\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your content goes here\
\pard\pardeftab720

\fs112 \cf6 \expnd0\expndtw0\kerning0
Broken Barriers\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\b \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Due Date(s):
\b0 \expnd0\expndtw0\kerning0
 3/9 11:59pm 
\fs26 \expnd0\expndtw0\kerning0
Contents\uc0\u8232 
\fs32 \cf7 \expnd0\expndtw0\kerning0
Learning Objectives\uc0\u8232 Overview\u8232 Barrier\u8232 Poisson Solver\u8232 Grading Policy\u8232 Good luck!
\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Learning Objectives
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0
\fs28 \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Deeper understanding of the barrier as a synchronization structure.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Being able to recognize parallelizable sections of code.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Profiling and debugging a parallel program.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Overview
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
You will implement a reusable barrier using only condition variables, mutexes and/or semaphores. Using this barrier we ask that you parallelize a provided serial implementation of a Poisson equation solver. Here\'92s some interesting, but unnecessary to complete this assignment, background:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf9 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/images/poisson.pdf"}}{\fldrslt \expnd0\expndtw0\kerning0
Poisson Equation Explanation}}\cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Barrier
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
You\'92ve already done most of this
\f0\fs28 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "https://github.com/angrave/SystemProgramming/wiki/Synchronization%2C-Part-6%3A-Implementing-a-barrier"}}{\fldrslt \cf9 \expnd0\expndtw0\kerning0
Wiki page}}\
Perhaps you haven\'92t realized it yet but throughout the last few assignments chances are that you\'92ve implemented a barrier. You\'92ve probably written some code along these lines:\
\pard\pardeftab720

\f2\fs32 \cf10 \cb11 \expnd0\expndtw0\kerning0
pthread_mutex_lock(\cf12 \expnd0\expndtw0\kerning0
&\cf10 \expnd0\expndtw0\kerning0
m);\cf1 \expnd0\expndtw0\kerning0
\
\cf10 \expnd0\expndtw0\kerning0
counter\cf12 \expnd0\expndtw0\kerning0
--\cf10 \expnd0\expndtw0\kerning0
;\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf13 \expnd0\expndtw0\kerning0
while\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
(counter\cf1 \expnd0\expndtw0\kerning0
 \cf12 \expnd0\expndtw0\kerning0
!=\cf1 \expnd0\expndtw0\kerning0
 \cf14 \expnd0\expndtw0\kerning0
0\cf10 \expnd0\expndtw0\kerning0
)\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
\{\cf1 \expnd0\expndtw0\kerning0
\
    \cf10 \expnd0\expndtw0\kerning0
pthread_cond_wait(\cf12 \expnd0\expndtw0\kerning0
&\cf10 \expnd0\expndtw0\kerning0
cv,\cf1 \expnd0\expndtw0\kerning0
 \cf12 \expnd0\expndtw0\kerning0
&\cf10 \expnd0\expndtw0\kerning0
m);\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
\}\cf1 \expnd0\expndtw0\kerning0
\
\cf10 \expnd0\expndtw0\kerning0
pthread_cond_signal(\cf12 \expnd0\expndtw0\kerning0
&\cf10 \expnd0\expndtw0\kerning0
cv);\cf1 \expnd0\expndtw0\kerning0
\
\cf10 \expnd0\expndtw0\kerning0
pthread_mutex_unlock(\cf12 \expnd0\expndtw0\kerning0
&\cf10 \expnd0\expndtw0\kerning0
m);\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
This is the essence of a barrier. The question we would like for you to ponder before moving on is this: What happens if we want to go through this critical section more than once? In an iterative parallel application that has to go through this critical section hundreds of times we need to have a way to automatically reset the barrier without introducing any race conditions. The only real guarantee that we would like to give our barrier is that the number of threads it can handle is fixed at initiation, any more trying to use the barrier would result in undefined behavior and any less would result in our code hanging.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Implement your barrier
\f0\fs28 \expnd0\expndtw0\kerning0
\
This is the meat and potatoes of this lab. We want to see how you decide to implement a reusable barrier without giving you any explicit hints outside of what is in the wiki (
\i \expnd0\expndtw0\kerning0
wink, wink, nudge, nudge
\i0 \expnd0\expndtw0\kerning0
). Ask the TAs if the direction you are going in is the right one or if you really feel lost. You can find some stub functions inside of 
\f2 \expnd0\expndtw0\kerning0
barrier.c
\f0 \expnd0\expndtw0\kerning0
 to get you started.\

\f1\fs48 \expnd0\expndtw0\kerning0
Test your barrier
\f0\fs28 \expnd0\expndtw0\kerning0
\
We provide some silly code inside 
\f2 \expnd0\expndtw0\kerning0
barrier_test.c
\f0 \expnd0\expndtw0\kerning0
 which should give you an idea of whether or not your barrier is working at all. We strongly encourage you to come up with some more robust tests. In addition we provide a library with a reference implementation. Simply call\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
make barrier_test-reference\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
to use our barrier implementation with your test file.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Poisson Solver
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
In 
\f2 \expnd0\expndtw0\kerning0
poisson.c
\f0 \expnd0\expndtw0\kerning0
 you will find the serial implementation of the Poisson Solver. There are a lot of moving parts as this is a full implementation of a relatively complex application, try to understand what is happening at at least a high level before diving into your parallelization.\
If you read the pdf linked at the top you would know that the way we have chosen to solve the poisson equation (you don\'92t need to know what poisson equations are) is to use a Jacobi iterative numerical method (you don\'92t need to know what that is either). This method gets closer to the real solution of the equation every time it goes through an iteration until there is an arbitrarily small difference between iterations (we call this arbitrary number epsilon).\
Given an equation in the form provided in 
\f2 \expnd0\expndtw0\kerning0
basic_function
\f0 \expnd0\expndtw0\kerning0
, let\'92s say, a sine wave, this program starts with an empty image (all the indices of the array are initialized to 0). Each iteration of this solver then populates the 
\f2 \expnd0\expndtw0\kerning0
current
\f0 \expnd0\expndtw0\kerning0
 array with the next guess of the solution and calculates the error between it and the 
\f2 \expnd0\expndtw0\kerning0
previous
\f0 \expnd0\expndtw0\kerning0
 array. This updating takes place inside the 
\f2 \expnd0\expndtw0\kerning0
solve_poisson_helper
\f0 \expnd0\expndtw0\kerning0
 function. During this process we want BMP image files of the state of the solution to be created at a fixed interval, we call this interval the granularity. That is, if we decide we want to see the state every 20 iterations (i.e. a granularity of 20) we expect to have an image of what our closest guess to the solution is at iteration 20, 40, 60, \'85 and so on. In addition we want an output of the image when we hit the desired error.\
The math required for each index of an iteration in our 2-D array is completely independent of any other result in the array. This means that, if we wanted to, we could have an individual thread calculate the result for each index entirely at the same time. A problem with this attribute is said to be embarrassingly parallel. However, each iteration depends on the previous one. Therefore you need to make sure all the indices of the previous iteration have been calculated before moving on (
\i \expnd0\expndtw0\kerning0
hint, hint
\i0 \expnd0\expndtw0\kerning0
).\
To do all this image writing we provide a little BMP library. The only function you absolutely need to use in it is 
\f2 \expnd0\expndtw0\kerning0
write_to_file
\f0 \expnd0\expndtw0\kerning0
. We do provide some \'93lower level\'94 functions inside of 
\f2 \expnd0\expndtw0\kerning0
bmp.h
\f0 \expnd0\expndtw0\kerning0
 in case you would like to increase the parallelism of your code. This should be unnecessary however and is simply a challenge to you if you would like to implement it. Just use function 
\f2 \expnd0\expndtw0\kerning0
write_to_file
\f0 \expnd0\expndtw0\kerning0
 in your parallel implementation at first. Remember, however, you probably don\'92t want all your threads writing this file and you need to make sure all the calculations are done before writing it (
\i \expnd0\expndtw0\kerning0
hint, hint
\i0 \expnd0\expndtw0\kerning0
).\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Struct Explanation
\f0\fs28 \expnd0\expndtw0\kerning0
\
There are three pointers to external memory in 
\f2 \expnd0\expndtw0\kerning0
poisson_struct
\f0 \expnd0\expndtw0\kerning0
, which is defined inside of poisson.h. The double pointers 
\f2 \expnd0\expndtw0\kerning0
current
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
previous
\f0 \expnd0\expndtw0\kerning0
 are the arrays for the calculated value of the current iteration and the previous iteration respectively. We need to keep both these arrays in memory as each new iteration depends on the previous one. At the end of the iteration you may notice that we swap the pointer values. This way we overwrite the solution from two iterations ago which is no longer needed. The double pointer 
\f2 \expnd0\expndtw0\kerning0
target_image
\f0 \expnd0\expndtw0\kerning0
 is the function that we are trying to satisfy the poisson equation for. The memory that these three 
\f2 \expnd0\expndtw0\kerning0
double **
\f0 \expnd0\expndtw0\kerning0
 variables point to are the same for every thread.\
\pard\pardeftab720

\f2\fs32 \cf13 \cb11 \expnd0\expndtw0\kerning0
typedef\cf1 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
struct\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
poisson_struct\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
\{\cf1 \expnd0\expndtw0\kerning0
\
    \cf13 \expnd0\expndtw0\kerning0
double\cf1 \expnd0\expndtw0\kerning0
 \cf12 \expnd0\expndtw0\kerning0
**\cf10 \expnd0\expndtw0\kerning0
current;\cf1 \expnd0\expndtw0\kerning0
\
    \cf13 \expnd0\expndtw0\kerning0
double\cf1 \expnd0\expndtw0\kerning0
 \cf12 \expnd0\expndtw0\kerning0
**\cf10 \expnd0\expndtw0\kerning0
previous;\cf1 \expnd0\expndtw0\kerning0
\
    \cf13 \expnd0\expndtw0\kerning0
double\cf1 \expnd0\expndtw0\kerning0
 \cf12 \expnd0\expndtw0\kerning0
**\cf10 \expnd0\expndtw0\kerning0
target_image;\cf1 \expnd0\expndtw0\kerning0
\
    \cf13 \expnd0\expndtw0\kerning0
int\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
iter;\cf1 \expnd0\expndtw0\kerning0
\
    \cf13 \expnd0\expndtw0\kerning0
int\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
n;\cf1 \expnd0\expndtw0\kerning0
\
    \cf13 \expnd0\expndtw0\kerning0
int\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
num_threads;\cf1 \expnd0\expndtw0\kerning0
\
    \cf13 \expnd0\expndtw0\kerning0
int\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
granularity;\cf1 \expnd0\expndtw0\kerning0
\
    \cf13 \expnd0\expndtw0\kerning0
double\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
epsilon;\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
\}\cf1 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
poisson_struct;\cf1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
The other values are metadata that we use inside of solve_poisson to decide, amongst other things, what section of 
\f2 \expnd0\expndtw0\kerning0
current
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
previous
\f0 \expnd0\expndtw0\kerning0
 a thread should work on. 
\f2 \expnd0\expndtw0\kerning0
n
\f0 \expnd0\expndtw0\kerning0
 is simply the size of the grid the user requested be solved. 
\f2 \expnd0\expndtw0\kerning0
num_threads
\f0 \expnd0\expndtw0\kerning0
 is a hint as to the number of threads to be created. You are not forced to create threads if you don\'92t think it will be beneficial. 
\f2 \expnd0\expndtw0\kerning0
granularity
\f0 \expnd0\expndtw0\kerning0
 is how many iterations to calculate before printing an image.\
Once you look over the code you will notice that the metadata variables are just input from the user and are put in the 
\f2 \expnd0\expndtw0\kerning0
poisson_struct
\f0 \expnd0\expndtw0\kerning0
 in order for all the functions inside 
\f2 \expnd0\expndtw0\kerning0
poisson.c
\f0 \expnd0\expndtw0\kerning0
 to be as opaque as possible. Any information from the outside that any part of the poisson equation solver may need in its serial form is represented inside the struct. We expect you to add more elements to this struct in order to accommodate the parallel implementation.\
The 
\f2 \expnd0\expndtw0\kerning0
iter
\f0 \expnd0\expndtw0\kerning0
 variable is only really there to get returned to the user, it\'92s simply the number of iterations that were run.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Functions you must modify
\f0\fs28 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f2 \cf6 \expnd0\expndtw0\kerning0
parallel_poisson
\f0 \expnd0\expndtw0\kerning0
 is the function we will call when we test your code. We do not care about the details of the implementation of any other function. As long as the output BMPs are identical to the reference implementation and you use your own barrier you will get full credit for correctness.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Functions you can modify
\f0\fs28 \expnd0\expndtw0\kerning0
\
Any function definition or declaration inside 
\f2 \expnd0\expndtw0\kerning0
poisson_test.c
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
poisson.c
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
bmp.c
\f0 \expnd0\expndtw0\kerning0
 or 
\f2 \expnd0\expndtw0\kerning0
bmp.h
\f0 \expnd0\expndtw0\kerning0
 is fair game to modify. We expect the signatures for the functions inside of 
\f2 \expnd0\expndtw0\kerning0
poisson.h
\f0 \expnd0\expndtw0\kerning0
 to be unchanged. We highly recommend that you modify only the poisson files however. TAs will not debug nor guide any modification to 
\f2 \expnd0\expndtw0\kerning0
bmp.*
\f0 \expnd0\expndtw0\kerning0
.\

\f1\fs48 \expnd0\expndtw0\kerning0
Functions we recommend you modifybasic_equation::poisson_test.c
\f0\fs28 \expnd0\expndtw0\kerning0
\
This function is provided inside of 
\f2 \expnd0\expndtw0\kerning0
poisson_test.c
\f0 \expnd0\expndtw0\kerning0
 as an example of a mathematical function that can be solved by our program. If you wish to input a different mathematical function to the solver we recommend you copy and modify 
\f2 \expnd0\expndtw0\kerning0
basic_equation
\f0 \expnd0\expndtw0\kerning0
.\

\f1\fs48 \expnd0\expndtw0\kerning0
parallel_poisson
\f0\fs28 \expnd0\expndtw0\kerning0
\
We use this function as the primary interface with the solver. This is where you should spin up your threads and handle the memory creation and cleanup.\

\f1\fs48 \expnd0\expndtw0\kerning0
solve_poisson
\f0\fs28 \expnd0\expndtw0\kerning0
\
Here is where the bulk of the parallelization can be achieved. We expect you to use the helper function to do the actual calculations based off of what thread is currently running this function. 
\b \expnd0\expndtw0\kerning0
Please focus most of your attention on this function.
\b0 \expnd0\expndtw0\kerning0
\

\f1\fs48 \expnd0\expndtw0\kerning0
poisson_setup
\f0\fs28 \expnd0\expndtw0\kerning0
\
We provide this function as a convenience to the user. We allocate the \'932-D\'94 array of doubles here. In addition we allocate the memory necessary for a 
\f2 \expnd0\expndtw0\kerning0
poisson_struct
\f0 \expnd0\expndtw0\kerning0
 per thread. If you take a closer look at the implementation of this function you will notice that we\'92re actually allocating each of the \'932-D\'94 arrays as a single piece of memory. This helps the compiler and the machine implement optimizations that make your code faster.\

\f1\fs48 \expnd0\expndtw0\kerning0
poisson_destroy
\f0\fs28 \expnd0\expndtw0\kerning0
\
Here we clean up all the memory allocated to each the 
\f2 \expnd0\expndtw0\kerning0
poisson_struct
\f0 \expnd0\expndtw0\kerning0
. Since many resources are shared between threads 
\f2 \expnd0\expndtw0\kerning0
poisson_setup
\f0 \expnd0\expndtw0\kerning0
 didn\'92t need to allocate a 
\f2 \expnd0\expndtw0\kerning0
u
\f0 \expnd0\expndtw0\kerning0
 or 
\f2 \expnd0\expndtw0\kerning0
uo
\f0 \expnd0\expndtw0\kerning0
 array for each struct for example. Don\'92t be alarmed by the way we free things in here it\'92s only done this way because of the 1-D to 2-D abstraction we did in setup.\

\f1\fs48 \expnd0\expndtw0\kerning0
Notes
\f0\fs28 \expnd0\expndtw0\kerning0
\
You may notice a lot of 
\f2 \expnd0\expndtw0\kerning0
N+2
\f0 \expnd0\expndtw0\kerning0
 floating around the code. This is because we want the boundaries of the matrices 
\f2 \expnd0\expndtw0\kerning0
u
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
uo
\f0 \expnd0\expndtw0\kerning0
 to always be 0. Therefore we allocate an additional 2 rows and columns in our arrays. If you examine the manner in which the solution is calculated inside of 
\f2 \expnd0\expndtw0\kerning0
solve_poisson_helper
\f0 \expnd0\expndtw0\kerning0
 it should be obvious why we need to give ourselves this little bit of extra space and to set it to an arbitrary value (think about going out of bounds in the array).\

\f1\fs48 \expnd0\expndtw0\kerning0
Compile and Run
\f0\fs28 \expnd0\expndtw0\kerning0
\
Running\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
make\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
will make both your barrier_test and poisson_test binaries.\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
make reference\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
will use your test files with the reference implementations. Please tell us if you see something that you think is wrong with the references. This is a young lab.\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
make debug\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
will make debug binaries for all the code you have written.\
You can run your tests any which way you would like but we have given you a simple interface in 
\f2 \expnd0\expndtw0\kerning0
poisson_test.c
\f0 \expnd0\expndtw0\kerning0
. You can run the test this way:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
./poisson_test <size> <num_threads> <granularity> <epsilon>\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
Where size is the size of the grid we would like to solve over, num_threads is the number of threads to be used, granularity is the number of iterations to calculate before writing an image and epsilon is the desired precision of the calculation.\
We recommend using a small value for size and large granularity and epsilon values until you are fairly certain that your code works. An epsilon between 0.05 and 0.0005 is adequate. 
\b \expnd0\expndtw0\kerning0
Be very careful when using a small granularity on sizes that will run for a long time. BMPs are uncompressed image files and will use up your filesystem quota very quickly if you are not careful.
\b0 \expnd0\expndtw0\kerning0
\
Some recommended inputs to use until you feel comfortable about the correctness of your code are:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb11 \expnd0\expndtw0\kerning0
./poisson_test 256 4 50 0.000005\
./poisson_test 512 4 100 0.00005\
./poisson_test 1024 8 150 0.0005\
./poisson_test 2048 8 500 0.0005\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
where they should take an increasing amount of time. When testing with different sizes you will probably notice some input that takes much longer than an input that is not much smaller than it. This is normal. If you recall from 233 this is called a performance cliff and happens in this application when the data no longer fits in a cache level, or in the cache at all.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Grading Policy
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
60% of this lab will be based on correctness, 50% from barrier and 50% from poisson. The following 40% will be based on performance compared to the reference implementation. The 40% will be on a sliding scale and no you 
\b \expnd0\expndtw0\kerning0
do not need to be as fast or faster than the reference to get full credit
\b0 \expnd0\expndtw0\kerning0
, we will choose goals the vast majority of the class can achieve.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Good luck!
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
References for those who missed them in the docs
\f0\fs28 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Important: {\field{\*\fldinst{HYPERLINK "https://github.com/angrave/SystemProgramming/wiki/Synchronization%2C-Part-6%3A-Implementing-a-barrier"}}{\fldrslt \cf9 \expnd0\expndtw0\kerning0
Wiki page}}\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Less Important: {\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/images/poisson.pdf"}}{\fldrslt \cf9 \expnd0\expndtw0\kerning0
Poisson Equation Explanation}}}