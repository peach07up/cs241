{\rtf1\ansi\ansicpg936\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red48\green58\blue166;\red51\green51\blue51;\red249\green249\blue249;
\red98\green98\blue98;\red26\green26\blue26;\red66\green199\blue218;\red19\green151\blue241;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\fs48 \cf1 \cb2 \expnd0\expndtw0\kerning0
menu
\fs52 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf1 \expnd0\expndtw0\kerning0
Title
\fs40 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf1 \cb2 CS 241 : System Programming\cb1 \
\pard\pardeftab720

\fs28 \cf1 \cb2 \expnd0\expndtw0\kerning0
Add spacer, to align navigation to the right\cb1 \expnd0\expndtw0\kerning0
\
\
\cb2 \expnd0\expndtw0\kerning0
Navigation. We hide it in small screens.
\fs26 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt \cf1 \cb2 Overview}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf1 \cb2 MPs}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cb2 Lab Sections}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cb2 Getting Help}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cb2 Schedule}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cb2 Meet the Crew!}}\
\pard\pardeftab720

\fs40 \cf3 \cb4 \expnd0\expndtw0\kerning0
CS 241\cb1 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt 
\fs26 \cf5 \cb4 \expnd0\expndtw0\kerning0
Overview}}
\fs26 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
MPs}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Lab Sections}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Getting Help}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Schedule}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Meet the Crew!}}\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your content goes here\
\pard\pardeftab720

\fs112 \cf6 \expnd0\expndtw0\kerning0
Mini Valgrind\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\fs26 \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Contents\uc0\u8232 
\fs32 \cf7 \expnd0\expndtw0\kerning0
Demo\uc0\u8232 Learning Objectives\u8232 Overview\u8232 Main Concepts\u8232 mini_valgrind.c and .h\u8232 Reference Executables\u8232 Testing
\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Demo
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your section leaders will attempt to demo a implementation of a working Mini Valgrind. Please do also make an effort to read over the code that is provided for you.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Learning Objectives
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0
\fs28 \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Metadata\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Review of memory management and linked lists\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Preparation for the Malloc MP\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Overview
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
For this lab, you will be implementing a small version of 
\i \expnd0\expndtw0\kerning0
Valgrind
\i0 \expnd0\expndtw0\kerning0
. Valgrind is a great tool which monitors your memory usage which you have likely used already. Your version will print out a summary of the memory leaks in a particular C program This lab is meant in part as preparation for your 
\i \expnd0\expndtw0\kerning0
Malloc MP
\i0 \expnd0\expndtw0\kerning0
, introducing some topics and techniques which you will find helpful when approaching Malloc soon.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Main Concepts
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
The main concept of this lab is using some extra memory for each allocation (which we will call metadata) to track each block of allocated memory. We have provided you with a struct 
\f2 \expnd0\expndtw0\kerning0
_meta_data
\f0 \expnd0\expndtw0\kerning0
 in 
\f2 \expnd0\expndtw0\kerning0
mini_valgrind.h
\f0 \expnd0\expndtw0\kerning0
. The metadata is set up as a node of a linked list (remember 125 and 225?) which should store information for each allocated block of the requested size. This includes the memory address of the actual block, line number it was allocated at, the size, filename, and a pointer to the next allocated block.\
If you do feel that you need a refresher on linked lists or other prerequisite concepts, feel free to ask a CA/TA one-on-one.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
mini_valgrind.c and .h
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
There are five functions in total you must be writing.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
mini_malloc
\f0\fs28 \expnd0\expndtw0\kerning0
\
Here you are to write a wrapper function for malloc that will not only allocating the required space but also allocate and set up metadata to track each requested block allocated by the standard 
\f2 \expnd0\expndtw0\kerning0
malloc
\f0 \expnd0\expndtw0\kerning0
. A call to 
\f2 \expnd0\expndtw0\kerning0
insert_meta_data
\f0 \expnd0\expndtw0\kerning0
 should be made to insert into the linked list of allocated blocks. 
\b \expnd0\expndtw0\kerning0
NOTE:
\b0 \expnd0\expndtw0\kerning0
 you do not have to write your own implementation of 
\f2 \expnd0\expndtw0\kerning0
malloc
\f0 \expnd0\expndtw0\kerning0
 using 
\f2 \expnd0\expndtw0\kerning0
sbrk
\f0 \expnd0\expndtw0\kerning0
 or related system calls. You will call the standard 
\f2 \expnd0\expndtw0\kerning0
malloc
\f0 \expnd0\expndtw0\kerning0
, simply allocating more space than normally due to the metadata. Return null if 
\f2 \expnd0\expndtw0\kerning0
malloc
\f0 \expnd0\expndtw0\kerning0
 fails, otherwise return the pointer to the allocated block of memory 
\b \expnd0\expndtw0\kerning0
NOT
\b0 \expnd0\expndtw0\kerning0
 the metadata.\
Take a look at the 
\f2 \expnd0\expndtw0\kerning0
#define
\f0 \expnd0\expndtw0\kerning0
 statements in 
\f2 \expnd0\expndtw0\kerning0
mini_valgrind.h
\f0 \expnd0\expndtw0\kerning0
 to understand how this is being used. Note the two macros 
\f2 \expnd0\expndtw0\kerning0
__FILE__
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
__LINE__
\f0 \expnd0\expndtw0\kerning0
.\

\f1\fs48 \expnd0\expndtw0\kerning0
insert_meta_data
\f0\fs28 \expnd0\expndtw0\kerning0
\
Here you are passed a pointer to your metadata, the size of the block without metadata, the filename, and the line number from which the allocation was made in the .c file being run. You should ensure your metadata is set up here, and insert into the linked list at the head 
\b \expnd0\expndtw0\kerning0
in constant time
\b0 \expnd0\expndtw0\kerning0
. You should be adding new nodes to the head of your linked list defined in the 
\f2 \expnd0\expndtw0\kerning0
mini_valgrind.h
\f0 \expnd0\expndtw0\kerning0
 file. Ensure that you update the 
\f2 \expnd0\expndtw0\kerning0
total_usage
\f0 \expnd0\expndtw0\kerning0
 here and deal with insertion into a linked list just as you have in 125/225.\

\f1\fs48 \expnd0\expndtw0\kerning0
mini_free
\f0\fs28 \expnd0\expndtw0\kerning0
\
Here you are passed a pointer to a block of previously allocated memory. To implement this function, use 
\f2 \expnd0\expndtw0\kerning0
remove_meta_data
\f0 \expnd0\expndtw0\kerning0
 properly, and also consider what happens when you free a 
\f2 \expnd0\expndtw0\kerning0
NULL
\f0 \expnd0\expndtw0\kerning0
 pointer.\
Take a look at the 
\f2 \expnd0\expndtw0\kerning0
#define
\f0 \expnd0\expndtw0\kerning0
 statements in 
\f2 \expnd0\expndtw0\kerning0
mini_valgrind.h
\f0 \expnd0\expndtw0\kerning0
 to understand how this is being used.\

\f1\fs48 \expnd0\expndtw0\kerning0
remove_meta_data
\f0\fs28 \expnd0\expndtw0\kerning0
\
Remove your metadata passed in as a parameter from the linked list here. Ensure that you update 
\f2 \expnd0\expndtw0\kerning0
total_free
\f0 \expnd0\expndtw0\kerning0
 or 
\f2 \expnd0\expndtw0\kerning0
bad_frees
\f0 \expnd0\expndtw0\kerning0
 (depending on whether the block pointed to was previously allocated, not already freed, etc.) here and deal with removal from a linked list just as you have in 125/225, keeping in mind the different cases that might come about (such as removal of the head node, etc.). You should free the metadata and requested block.\

\f1\fs48 \expnd0\expndtw0\kerning0
destroy
\f0\fs28 \expnd0\expndtw0\kerning0
\
Here you must delete all nodes of the linked list that have been created. Ensure that you 
\b \expnd0\expndtw0\kerning0
DO NOT
\b0 \expnd0\expndtw0\kerning0
 add to 
\f2 \expnd0\expndtw0\kerning0
total_free
\f0 \expnd0\expndtw0\kerning0
 here. This is called when the program has finished executing and so any blocks that have not been deallocated should be counted as memory leaks.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Reference Executables
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
You will be given a reference executable as usual for this lab. As usual, please direct as many \'93What should my code do in case X\'94 questions as you can to the reference implementation first, but do feel free to ask us after checking. NOTE: You must run make each time you would like to test with the reference when you change 
\f2 \expnd0\expndtw0\kerning0
test.c
\f0 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Testing
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
If you would like to check your program, you may write tests within 
\f2 \expnd0\expndtw0\kerning0
test.c
\f0 \expnd0\expndtw0\kerning0
. We recommend checking your program on a variety of inputs.\
Helpful Hints and Notes\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0
\b \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
DO NOT EDIT
\b0 \expnd0\expndtw0\kerning0
 print_report! You risk failing the autograder if you do! No one wants that!\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
A review of pointer arithmetic might be useful here.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Notice 
\f2 \expnd0\expndtw0\kerning0
char file_name[MAX_FILENAME_LENGTH]
\f0 \expnd0\expndtw0\kerning0
; within the struct in 
\f2 \expnd0\expndtw0\kerning0
mini_valgrind.h
\f0 \expnd0\expndtw0\kerning0
. Ensure that you write the filename over properly as the length of 
\f2 \expnd0\expndtw0\kerning0
file_name
\f0 \expnd0\expndtw0\kerning0
 is bounded by 
\f2 \expnd0\expndtw0\kerning0
MAX_FILENAME_LENGTH
\f0 \expnd0\expndtw0\kerning0
.}