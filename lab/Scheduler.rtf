{\rtf1\ansi\ansicpg936\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 LucidaGrande;\f4\fmodern\fcharset0 Courier-Bold;\f5\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red48\green58\blue166;\red51\green51\blue51;\red249\green249\blue249;
\red98\green98\blue98;\red26\green26\blue26;\red66\green199\blue218;\red19\green151\blue241;\red29\green30\blue26;
\red252\green34\blue110;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid502\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid801\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid802\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid902\'01\'01;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1002\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\fs48 \cf1 \cb2 \expnd0\expndtw0\kerning0
menu
\fs52 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf1 \expnd0\expndtw0\kerning0
Title
\fs40 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf1 \cb2 CS 241 : System Programming\cb1 \
\pard\pardeftab720

\fs28 \cf1 \cb2 \expnd0\expndtw0\kerning0
Add spacer, to align navigation to the right\cb1 \expnd0\expndtw0\kerning0
\
\
\cb2 \expnd0\expndtw0\kerning0
Navigation. We hide it in small screens.
\fs26 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt \cf1 \cb2 Overview}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf1 \cb2 MPs}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cb2 Lab Sections}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cb2 Getting Help}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cb2 Schedule}}\
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cb2 Meet the Crew!}}\
\pard\pardeftab720

\fs40 \cf3 \cb4 \expnd0\expndtw0\kerning0
CS 241\cb1 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/index.html"}}{\fldrslt 
\fs26 \cf5 \cb4 \expnd0\expndtw0\kerning0
Overview}}
\fs26 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/mps.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
MPs}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/labs.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Lab Sections}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/help.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Getting Help}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/schedule.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Schedule}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/staff.html"}}{\fldrslt \cf5 \cb4 \expnd0\expndtw0\kerning0
Meet the Crew!}}\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
Your content goes here\
\pard\pardeftab720

\fs112 \cf6 \expnd0\expndtw0\kerning0
Scheduler\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\b \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Due Date(s):
\b0 \expnd0\expndtw0\kerning0
 04/27 11:59pm 
\fs26 \expnd0\expndtw0\kerning0
Contents\uc0\u8232 
\fs32 \cf7 \expnd0\expndtw0\kerning0
Introduction\uc0\u8232 Before you start\u8232 Mission\u8232 Directions\u8232 Compile and Run\u8232 Logistics\u8232 Examples\u8232 How simulator.c works:
\fs28 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Introduction
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
This week, you won\'92t be working at a start up. There won\'92t be any made up CEO, any manager, any mentor.\
You\'92ll just be a kid doing a mandatory assignment for CS241.\
You\'92ll be writing a scheduler. Rather than interacting directly with the operating system, the benevolent CS241 course staff has provided you a simulator; we will simulate quantized and discrete time, jobs arriving, and jobs running. Your library will inform the scheduler which job should run next.\
You will find several files:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Programming files:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls2\ilvl1
\f2 \cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
simulator.c
\f0 \expnd0\expndtw0\kerning0
: 
\b \expnd0\expndtw0\kerning0
You should not edit this file.
\b0 \expnd0\expndtw0\kerning0
 This file is the discrete event simulator that, when run, will interact with your library. You can find more information on how to run this at the end of this web page. This file will be replaced by the autograder, so any changes you make will be ignored.\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
libpriqueue/libpriqueue.c
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
libpriqueue/libpriqueue.h
\f0 \expnd0\expndtw0\kerning0
: 
\b \expnd0\expndtw0\kerning0
You should not edit this file.
\b0 \expnd0\expndtw0\kerning0
 Files related to the priority queue.\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
libscheduler/libscheduler.c
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
libscheduler/libscheduler.h
\f0 \expnd0\expndtw0\kerning0
: Files related to the scheduler. You may need to edit both of the files. You can feel free to add any helper functions, but you must implement all the functions where we provide outlines.\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
examples.pl
\f0 \expnd0\expndtw0\kerning0
: A perl script of 
\f2 \expnd0\expndtw0\kerning0
diff
\f0 \expnd0\expndtw0\kerning0
 runs that tests your program against the 54 test output files. This file will output differences between your program and the examples.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Files you need to edit and commit:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls2\ilvl1
\f2 \cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
libscheduler/libscheduler.h
\f0 \expnd0\expndtw0\kerning0
\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
libscheduler/libscheduler.c
\f0 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Example input files:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls2\ilvl1
\f2 \cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
examples/proc1.csv
\f0 \expnd0\expndtw0\kerning0
\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
examples/proc2.csv
\f0 \expnd0\expndtw0\kerning0
\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
examples/proc3.csv
\f0 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Note the following column header definitions to read the files: - Arrival time: It is the unit of time when the job is expected to arrive and needs to be \'93handled\'94 by the scheduler. - Run time: Provides the total units of time for which the job is supposed to run or scheduled on a core. - Priority: Provides the priority of the job running, which is useful in case of pre-emptive scheduling.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Example output files:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls2\ilvl1
\f2 \cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
examples/proc1-c1-fcfs.out
\f0 \expnd0\expndtw0\kerning0
: Sample output of the simulator, using proc1.csv, 1 core, and FCFS scheduling.\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
examples/proc1-c2-fcfs.out
\f0 \expnd0\expndtw0\kerning0
: Sample output of the simulator, using proc1.csv, 2 cores, and FCFS scheduling.\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
examples/proc1-c1-pri.out
\f0 \expnd0\expndtw0\kerning0
: Sample output of the simulator, using proc1.csv, 1 core, and PRI scheduling.\
\ls2\ilvl1
\f2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f2 	}\expnd0\expndtw0\kerning0
...
\f0 \expnd0\expndtw0\kerning0
 
\i \expnd0\expndtw0\kerning0
(View the example directory for the full set.)
\i0 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Note that for each unit of time, the output files tell you state of priority queue along with all the cores and jobs running on them. It will also provide information about any jobs that arrive, are scheduled or finished.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
In short, all you need to write are libscheduler.h and libscheduler.c.
\f0\fs32 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Before you start
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b\fs28 \cf6 \expnd0\expndtw0\kerning0
Think about how to implement a scheduler!
\b0 \expnd0\expndtw0\kerning0
\
Try to answer these questions\'85\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
What do you do for incoming jobs?\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
How do you sort your job so that you can find the next job according to different scheme?\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
What kind of data structures do you need?\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
What a scheduler does is to put all the jobs it gets in a queue and then sort them in some order(related to scheme). Scheduler give them to CPU one by one. The key in scheduler is the scheme it use, and the choice of scheduling algorithm depends on many factors. For example, First Come First Serve (FCFS) is really easy to implement but might keep a short job waiting really long for a long process at the front.\
So now we know that a scheduler puts jobs in a queue, sort them, and give them to CPU in some order. Then what will be the best data structure to store these jobs? Priority queue can do this job really well! A priority queue is a queue with a really cool feature. It puts every incoming node in correct position so that the queue is always ordered. Therefore, you don\'92t need to call 
\f2 \expnd0\expndtw0\kerning0
sort()
\f0 \expnd0\expndtw0\kerning0
 every time you get a new node(job). And you can simply give them out by pulling out the first element of the queue.\
An important question now is: \'93What do you mean by 
\b \expnd0\expndtw0\kerning0
ordered
\b0 \expnd0\expndtw0\kerning0
?\'94 Lets take FCFS scheduling for example. Ideally, scheduler should be able to: * Receive a job. * Put it in a queue. * Queue sort the job. * Give it out to CPU.\
And since we are doing FCFS, we want the element come first to be at the front of the queue. So you should give jobs arriving earlier higher priority and jobs arriving afterwards lower priority.\
Take Shortest Job First(SJF) for another example. You can give those jobs that can be finished faster higher priority. As you can see here, the key to implement a scheduler is to decide 
\b \expnd0\expndtw0\kerning0
PRIORITY
\b0 \expnd0\expndtw0\kerning0
. And the way to decide priority in a priority queue is by giving a comparator function. By defining a job A is better than a job B in a priority queue, we mean that A has higher priority than B.\
So basically, half of your job in this lab is simply writing a comparator function that helps you decide which job has higher priority.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Mission
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
[Part 1]: Priority Queue
\f0\fs28 \expnd0\expndtw0\kerning0
\
To build a scheduler, a fundamental data structure is a priority queue. The first part of this lab requires you to \expnd0\expndtw0\kerning0
\strike \strikec6 implement\expnd0\expndtw0\kerning0
\strike0\striked0  read and understand 
\f2 \expnd0\expndtw0\kerning0
libpriqueue
\f0 \expnd0\expndtw0\kerning0
, our priority queue library. You will be using this library in your scheduler.\

\f1\fs48 \expnd0\expndtw0\kerning0
[Part 2]: Scheduler
\f0\fs28 \expnd0\expndtw0\kerning0
\
You will need to implement a multi-core scheduler in a simulated computer. You will be provided with a set of cores to schedule a set of tasks on, much like a real Linux scheduler.\
The scheduling algorithms you are going to implements are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Round Robin (RR)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
First Come First Server (FCFS)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Preemptive Shortest Job First (PSJF)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Priority (PRI)\
\pard\pardeftab720

\b \cf6 \expnd0\expndtw0\kerning0
You should use the priority queue \expnd0\expndtw0\kerning0
\strike \strikec6 you just wrote\expnd0\expndtw0\kerning0
\strike0\striked0  to help you complete this part of the lab.
\b0 \expnd0\expndtw0\kerning0
\
To complete this lab, you must implement the eight functions defined in 
\f2 \expnd0\expndtw0\kerning0
libscheduler/libscheduler.c
\f0 \expnd0\expndtw0\kerning0
. These functions are self-descriptive, but a full function outline is provided for you for each function in the SVN files. These function will be utilized by 
\f2 \expnd0\expndtw0\kerning0
simulator.c
\f0 \expnd0\expndtw0\kerning0
.\
You might want to understand how scheduler works. So we put a detailed explanation in the bottom of this webpage.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Directions
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
To help you finish this lab efficiently, we recommend you follow these steps:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Understand when will your function be called.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Try to write pseudo code for comparator first and see what kinds of informations you will need. For example, you probably need the arrival time of each job so you can implement a FCFS by setting priority according to time.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Create data members in struct _job_t you need for step 2.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Go back and complete your comparator functions.\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
The second part of the lab is to set up scheduler itself and manage incoming jobs and completed jobs. If you look at simulator, there is no virtual CPU there. It only set up the number of cores a scheduler should have. So the core should be set up(init) in scheduler library. Now you should implement those functions related to CPU( like start_up, new_job, job_finished, quantum_expired)\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Take a look at all these functions, write some pseudocode to realize your thoughts.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
You must have some questions now, so take a look at the simulator.c and the explanation section to have a better idea about how to implement it.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
You might need to implement some helper functions to help you write these functions.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls6\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
You might need to know how to find a free core or a core having a job you can do preemptions so that you can assign jobs to.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Finish these functions.\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
The last part of your jobs are stats and clean-up, they are pretty easy, but you might need some variables to help you keep track of these stats.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Compile and Run
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
To compile this lab, run:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
make clean\
make\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
To run the simulator, run:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
./simulator -c <cores> -s <scheme> <input file>\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
For example:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
./simulator -c 2 -s fcfs examples/proc1.csv\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
The acceptable values for 
\f2 \expnd0\expndtw0\kerning0
scheme
\f0 \expnd0\expndtw0\kerning0
 (outlined above) are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls7\ilvl0
\f2 \cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
FCFS
\f0 \expnd0\expndtw0\kerning0
\
\ls7\ilvl0
\f2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
PRI
\f0 \expnd0\expndtw0\kerning0
\
\ls7\ilvl0
\f2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
PSFJ
\f0 \expnd0\expndtw0\kerning0
\
\ls7\ilvl0
\f2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
RR#
\f0 \expnd0\expndtw0\kerning0
, where # indicates any numeric value\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
We provide three sample schedules: 
\f2 \expnd0\expndtw0\kerning0
examples/proc1.csv
\f0 \expnd0\expndtw0\kerning0
, 
\f2 \expnd0\expndtw0\kerning0
examples/proc2.csv
\f0 \expnd0\expndtw0\kerning0
 and 
\f2 \expnd0\expndtw0\kerning0
examples/proc3.csv
\f0 \expnd0\expndtw0\kerning0
. We also provide the expected output of those schedules in the 
\f2 \expnd0\expndtw0\kerning0
examples
\f0 \expnd0\expndtw0\kerning0
 directory. 
\b \expnd0\expndtw0\kerning0
It\'92s only important that lines starting with 
\f4 \expnd0\expndtw0\kerning0
FINAL TIMING DIAGRAM
\f0 \expnd0\expndtw0\kerning0
 match.
\b0 \expnd0\expndtw0\kerning0
 We will not grade any output except the last few lines, as 
\f2 \expnd0\expndtw0\kerning0
show_queue()
\f0 \expnd0\expndtw0\kerning0
 is not required to be implemented in the same way as we did. To test your program against all the test cases in an automated way, we provide a simple perl script. To run all 54 tests, simply run:\
\pard\pardeftab720

\f2\fs32 \cf1 \cb9 \expnd0\expndtw0\kerning0
./examples.pl\
\pard\pardeftab720

\f0\fs28 \cf6 \cb1 \expnd0\expndtw0\kerning0
All differences will be printed. Therefore, if no data is printed, your program has passed the test cases in the 
\f2 \expnd0\expndtw0\kerning0
examples
\f0 \expnd0\expndtw0\kerning0
 directory.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Logistics
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
DON\'92T EDIT THE MAKEFILE
\f0\fs28 \expnd0\expndtw0\kerning0
\
In CS 241, every program will be compiled using 
\f2 \expnd0\expndtw0\kerning0
make
\f0 \expnd0\expndtw0\kerning0
. When autograding your lab, we add additional files for test cases and use a different Makefile. Therefore, we do not use your Makefile to compile the code. 
\b \expnd0\expndtw0\kerning0
If you edit your Makefile, your code probably won\'92t compile for the autograder.
\b0 \expnd0\expndtw0\kerning0
\

\f1\fs48 \expnd0\expndtw0\kerning0
ORGANIZATION OF FILES
\f0\fs28 \expnd0\expndtw0\kerning0
\
This file is one of two instruction files associated with machine problems in CS 241. This file describes how to submit your lab grading details, and other details that are shared between all labs in CS 241. With each lab, there is a separate file that explains the specific details on the lab.\

\f1\fs48 \expnd0\expndtw0\kerning0
TESTING YOUR PROGRAM
\f0\fs28 \expnd0\expndtw0\kerning0
\
Since all testing and grading by course staff will be done on the VMs, it is 
\b \expnd0\expndtw0\kerning0
STRONGLY ADVISED
\b0 \expnd0\expndtw0\kerning0
 that you test your program on your CS241 VM before submission. The fact that your program \'93runs perfectly\'94 on your own machine will get you zero points if your program does not run at all on the provided CS241 VMs.\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
Examples
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls8\ilvl0
\fs28 \cf10 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/scheduler_example1"}}{\fldrslt \expnd0\expndtw0\kerning0
Example 1}}\cf6 \expnd0\expndtw0\kerning0
\
\ls8\ilvl0\cf10 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/scheduler_example2"}}{\fldrslt \expnd0\expndtw0\kerning0
Example 2}}\cf6 \expnd0\expndtw0\kerning0
\
\ls8\ilvl0\cf10 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://illinois-cs.github.io/scheduler_example3"}}{\fldrslt \expnd0\expndtw0\kerning0
Example 3}}\cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f1\fs48 \cf1 \cb8 \expnd0\expndtw0\kerning0
How simulator.c works:
\f0\fs32 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
In libscheduler.c, you\'92ll implement a bunch of methods that we\'92ll call as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls9\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
To start things off, we\'92ll call 
\f2 \expnd0\expndtw0\kerning0
scheduler_start_up(...)
\f0 \expnd0\expndtw0\kerning0
 exactly once.\
\ls9\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Then, we\'92ll run through all the time units from the beginning to the end.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls9\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
If there\'92s a jov that just ended during this time unit, we\'92ll make a call to 
\f2 \expnd0\expndtw0\kerning0
scheduler_job_finished(...)
\f0 \expnd0\expndtw0\kerning0
.\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
If we\'92re using 
\f2 \expnd0\expndtw0\kerning0
RR
\f0 \expnd0\expndtw0\kerning0
 and a time quantum expires during this time unit, we\'92ll call 
\f2 \expnd0\expndtw0\kerning0
scheduler_quantum_expired(...)
\f0 \expnd0\expndtw0\kerning0
.\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
If there\'92s a job that begins at this time unit, we\'92ll add this job using one call to 
\f2 \expnd0\expndtw0\kerning0
scheduler_new_job(...)
\f0 \expnd0\expndtw0\kerning0
. This is specified in the files in examples/proc1.csv, examples/proc2.csv, and examples/proc3.csv.\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Then we\'92ll run the next time unit and repeat.\
\pard\pardeftab720

\f1\fs48 \cf6 \expnd0\expndtw0\kerning0
Scheduler Details
\f0\fs28 \expnd0\expndtw0\kerning0
\
The simulator will always follow a few, very specific rules. It\'92s not important to understand the specifics of the simulator, but we provide these to help you with debugging:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls10\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
All execution of tasks will happen 
\b \expnd0\expndtw0\kerning0
at the very end of a time unit
\b0 \expnd0\expndtw0\kerning0
.\
\ls10\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The events in a time unit will occur in this order:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls10\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
If a job\'92s last unit of execution occurred in the previous time unit, a 
\f2 \expnd0\expndtw0\kerning0
scheduler_job_finished()
\f0 \expnd0\expndtw0\kerning0
 call will be made as the first call in the new time unit.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls10\ilvl1
\i \cf6 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
If a job has finished, the quantum timer for the core will be reset. (Therefore, 
\f5 \expnd0\expndtw0\kerning0
scheduler_quantum_expired()
\f0 \expnd0\expndtw0\kerning0
 will never be called on a specific core at the same unit that a job has finished, no matter what scheme)
\i0 \expnd0\expndtw0\kerning0
\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls10\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
In 
\f2 \expnd0\expndtw0\kerning0
RR
\f0 \expnd0\expndtw0\kerning0
, if the quantum timer has expired, a 
\f2 \expnd0\expndtw0\kerning0
scheduler_quantum_expired()
\f0 \expnd0\expndtw0\kerning0
 will be called. Please notice that if the job finished at the same time unit its quantum expired, this function will NOT be called. This is because its quantum is reset when the job finishes, and scheduler_job_finished() is always called in the first place.\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
If any job arrives at the time unit, the 
\f2 \expnd0\expndtw0\kerning0
scheduler_new_job()
\f0 \expnd0\expndtw0\kerning0
 function will be called.\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Finally, the CPU will execute the active jobs on each core.\
\pard\pardeftab720
\cf6 \expnd0\expndtw0\kerning0
There are a few specific cases where a scheduler needs to define behavior based on the scheduling policy provided. In this lab, you should apply the following rules:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls11\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
When multiple cores are available(have no job running) to take on a job, the core with the lowest id should take the job.\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
A job cannot be run on multiple cores in the same time unit. However, a job may start on one core, get preempted, and continue on a different core.\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In 
\f2 \expnd0\expndtw0\kerning0
PSJF
\f0 \expnd0\expndtw0\kerning0
, if the job has been partially executed, schedule the job based on its 
\b \expnd0\expndtw0\kerning0
remaining time
\b0 \expnd0\expndtw0\kerning0
 (not the full running time).\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In 
\f2 \expnd0\expndtw0\kerning0
RR
\f0 \expnd0\expndtw0\kerning0
, when a new job arrives, it must be placed at the end of the cycle of jobs. Every existing job must run some amount of time before the new job should run.\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In all schemes except 
\f2 \expnd0\expndtw0\kerning0
RR
\f0 \expnd0\expndtw0\kerning0
, if two or more jobs are tied (e.g., if in 
\f2 \expnd0\expndtw0\kerning0
PRI
\f0 \expnd0\expndtw0\kerning0
 multiple jobs have the priority of 
\f2 \expnd0\expndtw0\kerning0
1
\f0 \expnd0\expndtw0\kerning0
), use the job with the 
\b \expnd0\expndtw0\kerning0
earliest arrival time
\b0 \expnd0\expndtw0\kerning0
. In 
\f2 \expnd0\expndtw0\kerning0
scheduler_new_job()
\f0 \expnd0\expndtw0\kerning0
, we provided the assumption that all jobs will have a unique arrival time. In 
\f2 \expnd0\expndtw0\kerning0
RR
\f0 \expnd0\expndtw0\kerning0
, when a job is unscheduled as a result of the quantum timer expiring, it must always be placed at the end of the queue.\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In all non-preemptive schemes, a new job can never swap out any job that has already been put into the core. Consider a schedule running 
\f2 \expnd0\expndtw0\kerning0
PRI
\f0 \expnd0\expndtw0\kerning0
 on a single core. After some amount of time:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls11\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
A job finished in the last time unit, resulting in a 
\f2 \expnd0\expndtw0\kerning0
scheduler_job_finished()
\f0 \expnd0\expndtw0\kerning0
 call to be made to your scheduler. The scheduler returns that job(id=4) should run. job(id=4) has priority 3.\
\ls11\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
In this time unit, a new job(id=5, priority 1) also arrived. This results in a 
\f2 \expnd0\expndtw0\kerning0
scheduler_new_job()
\f0 \expnd0\expndtw0\kerning0
 call to be made to your scheduler. Even though the new job(id=5) has greater priority(priority 1), it will NOT swap out job(id=4), which was already scheduled by 
\f2 \expnd0\expndtw0\kerning0
scheduler_job_finished()
\f0 \expnd0\expndtw0\kerning0
. Now, job(id=4) is scheduled to run.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls11\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In all preemptive schemes, a new job needs to preempt the job that is \'91worst\'92. Consider a schedule running 
\f2 \expnd0\expndtw0\kerning0
PSJF
\f0 \expnd0\expndtw0\kerning0
 on 2 cores. After some amount of time:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls11\ilvl1\cf6 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Core 1: job finished in the last time unit. Core 2: Job(id=3, 5 seconds remaining)\
\ls11\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
The job in core 1 finished in the last time unit, resulting in a 
\f2 \expnd0\expndtw0\kerning0
scheduler_job_finished()
\f0 \expnd0\expndtw0\kerning0
 call to be made to your scheduler. The scheduler returns that job(id=4, 10 seconds remaining) should run on core 1.\
\ls11\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
In this time unit, a new job(id=5, 7 seconds remaining) also arrived. This results in a 
\f2 \expnd0\expndtw0\kerning0
scheduler_new_job()
\f0 \expnd0\expndtw0\kerning0
 call to be made to your scheduler. Since the new job has less time remaining than the worst job in 2 cores, it will preempt that worst job(id=4), which was scheduled by 
\f2 \expnd0\expndtw0\kerning0
scheduler_job_finished()
\f0 \expnd0\expndtw0\kerning0
. Now job(id=5) and job(id=3) are scheduled to run.\
\ls11\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Only after all jobs finished and any new job arrives will the CPU execute the task. In this example, job(id=4) was never run on the CPU when it was scheduled by 
\f2 \expnd0\expndtw0\kerning0
scheduler_job_finished()
\f0 \expnd0\expndtw0\kerning0
. 
\b \expnd0\expndtw0\kerning0
When calculating response time, you should not consider job as responded until it runs a CPU cycle.}